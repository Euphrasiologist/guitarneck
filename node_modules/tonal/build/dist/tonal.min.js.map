{"version":3,"file":"tonal.min.js","sources":["../../note/index.js","../../array/index.js","../../interval/index.js","../../distance/index.js","../../chord-dictionary/chord-data.js","../../pcset/index.js","../../node_modules/rsvp/dist/rsvp.es.js","../../chord-dictionary/index.js","../../chord/index.js","../../roman-numeral/index.js","../../key/index.js","../../scale-dictionary/index.js","../../scale-dictionary/scale-data.js","../../scale/index.js","../../tonal/index.js"],"sourcesContent":["/**\n * A collection of functions to manipulate musical notes in scientific notation\n *\n * ## Usage\n *\n * @example\n * import Note from \"tonal/note\"\n * Note.name(\"bb2\") // => \"Bb2\"\n * Note.chroma(\"bb2\") // => 10\n * Note.midi(\"a4\") // => 69\n * Note.freq(\"a4\") // => 440\n * Note.oct(\"G3\") // => 3\n *\n * @example\n * const Tonal = require('tonal')\n * Tonal.Note.midi(\"C4\") // => 60\n *\n * ## API\n *\n * @module Note\n */\nexport default {\n  tokenize,\n  props,\n  name,\n  names,\n  pc,\n  oct,\n  chroma,\n  midi,\n  freq,\n  fromMidi,\n  freqToMidi,\n  altToAcc,\n  stepToLetter,\n  fromProps,\n  simplify,\n  enharmonic\n};\n\nconst NAMES = \"C C# Db D D# Eb E F F# Gb G G# Ab A A# Bb B\".split(\" \");\n\n/**\n * Get a list of note names (pitch classes) within a octave\n *\n * @param {string} filter - an object with\n * - [boolean] unaltered: defaults to true\n * - [boolean] flats: defaults to false\n * - [boolean] sharps: defaults to false\n * @return {Array<string>} the list of notes\n *\n * @example\n * Note.names() // => [ \"C\", \"D\", \"E\", \"F\", \"G\", \"A\", \"B\" ]\n * Note.names({ flats: true }) // => [ \"C\", \"Db\", \"D\", \"Eb\", \"E\", \"F\", \"Gb\", \"G\", \"Ab\", \"A\", \"Bb\", \"B\" ]\n * Note.names({ sharps: true }) // => [ \"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\" ]\n * Note.names({ unaltered: false, flats: true })\n * // => [ \"Db\", \"Eb\", \"Gb\", \"Ab\", \"Bb\" ]\n */\nexport function names(types = {}) {\n  return NAMES.filter(\n    note =>\n      (types.unaltered !== false && note[1] === undefined) ||\n      (types.flats === true && note[1] === \"b\") ||\n      (types.sharps === true && note[1] === \"#\")\n  );\n}\n\nconst SHARPS = names({ sharps: true });\nconst FLATS = names({ flats: true });\nconst REGEX = /^([a-gA-G]?)(#{1,}|b{1,}|x{1,}|)(-?\\d*)\\s*(.*)$/;\n\n/**\n * Split a string into tokens related to note parts.\n * It returns an array of strings `[letter, accidental, octave, modifier]`\n *\n * It always returns an array\n *\n * @param {string} str\n * @return {Array} an array of note tokens\n * @example\n * Note.tokenize(\"C#2\") // => [\"C\", \"#\", \"2\", \"\"]\n * Note.tokenize(\"Db3 major\") // => [\"D\", \"b\", \"3\", \"major\"]\n * Note.tokenize(\"major\") // => [\"\", \"\", \"\", \"major\"]\n * Note.tokenize(\"##\") // => [\"\", \"##\", \"\", \"\"]\n * Note.tokenize() // => [\"\", \"\", \"\", \"\"]\n */\nexport function tokenize(str) {\n  if (typeof str !== \"string\") str = \"\";\n  const m = REGEX.exec(str);\n  if (!m) return null;\n  return [m[1].toUpperCase(), m[2].replace(/x/g, \"##\"), m[3], m[4]];\n}\n\nconst NO_NOTE = Object.freeze({\n  pc: null,\n  name: null,\n  step: null,\n  alt: null,\n  oct: null,\n  octStr: null,\n  chroma: null,\n  midi: null,\n  freq: null\n});\n\nconst SEMI = [0, 2, 4, 5, 7, 9, 11];\nconst properties = str => {\n  const tokens = tokenize(str);\n  if (tokens[0] === \"\" || tokens[3] !== \"\") return NO_NOTE;\n  const [letter, acc, octStr] = tokens;\n  const p = { letter, acc, octStr };\n  p.pc = p.letter + p.acc;\n  p.name = p.pc + octStr;\n  p.step = (p.letter.charCodeAt(0) + 3) % 7;\n  p.alt = p.acc[0] === \"b\" ? -p.acc.length : p.acc.length;\n  p.oct = octStr.length ? +octStr : null;\n  p.chroma = (SEMI[p.step] + p.alt + 120) % 12;\n  p.midi = p.oct !== null ? SEMI[p.step] + p.alt + 12 * (p.oct + 1) : null;\n  p.freq = midiToFreq(p.midi);\n  return Object.freeze(p);\n};\n\nlet cached = {};\n/**\n * Get note properties. It returns an object with the following information:\n *\n * - name {string}: the note name. The letter is always in uppercase\n * - letter {string}: the note letter, always in uppercase\n * - acc {string}: the note accidentals\n * - octave {number}: the octave or null if not present\n * - pc {string}: the pitch class (letter + accidentals)\n * - step {number}: number equivalent of the note letter. 0 means C ... 6 means B.\n * - alt {number}: number equivalent of accidentals (negative are flats, positive sharps)\n * - chroma {number}: number equivalent of the pitch class, where 0 is C, 1 is C# or Db, 2 is D...\n * - midi {number}: the note midi number (IMPORTANT! it can be outside 0 to 127 range)\n * - freq {number}: the frequency using an equal temperament at 440Hz\n *\n * This function *always* returns an object with all this properties, but if it\"s\n * not a valid note all properties will be null.\n *\n * The returned object can\"t be mutated.\n *\n * @param {string} note - the note name in scientific notation\n * @return {Object} an object with the properties (or an object will all properties\n * set to null if not valid note)\n * @example\n * Note.props(\"fx-3\").name // => \"F##-3\"\n * Note.props(\"invalid\").name // => null\n * Note.props(\"C#3\").oct // => 3\n * Note.props().oct // => null\n */\nexport function props(str) {\n  return cached[str] || (cached[str] = properties(str));\n}\n\n/**\n * Given a note name, return the note name or null if not valid note.\n * The note name will ALWAYS have the letter in upercase and accidentals\n * using # or b\n *\n * Can be used to test if a string is a valid note name.\n *\n * @function\n * @param {Pitch|string}\n * @return {string}\n *\n * @example\n * Note.name(\"cb2\") // => \"Cb2\"\n * [\"c\", \"db3\", \"2\", \"g+\", \"gx4\"].map(Note.name) // => [\"C\", \"Db3\", null, null, \"G##4\"]\n */\nexport function name(str) {\n  return props(str).name;\n}\n\n/**\n * Get pitch class of a note. The note can be a string or a pitch array.\n *\n * @function\n * @param {string|Pitch}\n * @return {string} the pitch class\n * @example\n * Note.pc(\"Db3\") // => \"Db\"\n * [\"db3\", \"bb6\", \"fx2\"].map(Note.pc) // => [ \"Db\", \"Bb\", \"F##\"]\n */\nexport function pc(str) {\n  return props(str).pc;\n}\n\nconst isMidiRange = m => m >= 0 && m <= 127;\n/**\n * Get the note midi number. It always return a number between 0 and 127\n *\n * @function\n * @param {string|Number} note - the note to get the midi number from\n * @return {Integer} the midi number or null if not valid pitch\n * @example\n * Note.midi(\"C4\") // => 60\n * Note.midi(60) // => 60\n * @see midi.toMidi\n */\nexport function midi(note) {\n  if (typeof note !== \"number\" && typeof note !== \"string\") {\n    return null;\n  }\n  const midi = props(note).midi;\n  const value = midi || midi === 0 ? midi : +note;\n  return isMidiRange(value) ? value : null;\n}\n\n/**\n * Get the frequency from midi number\n *\n * @param {number} midi - the note midi number\n * @param {number} tuning - (Optional) 440 by default\n * @return {number} the frequency or null if not valid note midi\n */\nexport const midiToFreq = (midi, tuning = 440) =>\n  typeof midi === \"number\" ? Math.pow(2, (midi - 69) / 12) * tuning : null;\n\n/**\n * Get the frequency of a note\n *\n * @function\n * @param {string|Number} note - the note name or midi note number\n * @return {number} the frequency\n * @example\n * Note.freq(\"A4\") // => 440\n * Note.freq(69) // => 440\n */\nexport function freq(note) {\n  return props(note).freq || midiToFreq(note);\n}\n\nconst L2 = Math.log(2);\nconst L440 = Math.log(440);\n/**\n * Get the midi number from a frequency in hertz. The midi number can\n * contain decimals (with two digits precission)\n *\n * @param {number} frequency\n * @return {number}\n * @example\n * Note.freqToMidi(220)); //=> 57;\n * Note.freqToMidi(261.62)); //=> 60;\n * Note.freqToMidi(261)); //=> 59.96;\n */\nexport function freqToMidi(freq) {\n  const v = (12 * (Math.log(freq) - L440)) / L2 + 69;\n  return Math.round(v * 100) / 100;\n}\n\n/**\n * Return the chroma of a note. The chroma is the numeric equivalent to the\n * pitch class, where 0 is C, 1 is C# or Db, 2 is D... 11 is B\n *\n * @param {string} note - the note name\n * @return {Integer} the chroma number\n * @example\n * Note.chroma(\"Cb\") // => 11\n * [\"C\", \"D\", \"E\", \"F\"].map(Note.chroma) // => [0, 2, 4, 5]\n */\nexport function chroma(str) {\n  return props(str).chroma;\n}\n\n/**\n * Get the octave of the given pitch\n *\n * @function\n * @param {string} note - the note\n * @return {Integer} the octave or null if doesn\"t have an octave or not a valid note\n * @example\n * Note.oct(\"C#4\") // => 4\n * Note.oct(\"C\") // => null\n * Note.oct(\"blah\") // => undefined\n */\nexport function oct(str) {\n  return props(str).oct;\n}\n\nconst LETTERS = \"CDEFGAB\";\n/**\n * Given a step number return it's letter (0 = C, 1 = D, 2 = E)\n * @param {number} step\n * @return {string} the letter\n * @example\n * Note.stepToLetter(3) // => \"F\"\n */\nexport function stepToLetter(step) {\n  return LETTERS[step];\n}\n\nconst fillStr = (s, n) => Array(n + 1).join(s);\nconst numToStr = (num, op) => (typeof num !== \"number\" ? \"\" : op(num));\n\n/**\n * Given an alteration number, return the accidentals\n * @param {number} alt\n * @return {string}\n * @example\n * Note.altToAcc(-3) // => \"bbb\"\n */\nexport function altToAcc(alt) {\n  return numToStr(alt, alt =>\n    alt < 0 ? fillStr(\"b\", -alt) : fillStr(\"#\", alt)\n  );\n}\n\n/**\n * Creates a note name in scientific notation from note properties,\n * and optionally another note name.\n * It receives an object with:\n * - step: the note step (0 = C, 1 = D, ... 6 = B)\n * - alt: (optional) the alteration. Negative numbers are flats, positive sharps\n * - oct: (optional) the octave\n *\n * Optionally it receives another note as a \"base\", meaning that any prop not explicitly\n * received on the first parameter will be taken from that base note. That way it can be used\n * as an immutable \"set\" operator for a that base note\n *\n * @function\n * @param {Object} props - the note properties\n * @param {string} [baseNote] - note to build the result from. If given, it returns\n * the result of applying the given props to this note.\n * @return {string} the note name in scientific notation or null if not valid properties\n * @example\n * Note.from({ step: 5 }) // => \"A\"\n * Note.from({ step: 1, acc: -1 }) // => \"Db\"\n * Note.from({ step: 2, acc: 2, oct: 2 }) // => \"E##2\"\n * Note.from({ step: 7 }) // => null\n * Note.from({alt: 1, oct: 3}, \"C4\") // => \"C#3\"\n */\nexport function fromProps(fromProps = {}, baseNote = null) {\n  const { step, alt, oct } = baseNote\n    ? Object.assign({}, props(baseNote), fromProps)\n    : fromProps;\n  const letter = stepToLetter(step);\n  if (!letter) return null;\n  const pc = letter + altToAcc(alt);\n  return oct || oct === 0 ? pc + oct : pc;\n}\n\n/**\n * Given a midi number, returns a note name. The altered notes will have\n * flats unless explicitly set with the optional `useSharps` parameter.\n *\n * @function\n * @param {number} midi - the midi note number\n * @param {Object} options = default: `{ sharps: false, pitchClass: false }`\n * @param {boolean} useSharps - (Optional) set to true to use sharps instead of flats\n * @return {string} the note name\n * @example\n * Note.fromMidi(61) // => \"Db4\"\n * Note.fromMidi(61, { pitchClass: true }) // => \"Db\"\n * Note.fromMidi(61, { sharps: true }) // => \"C#4\"\n * Note.fromMidi(61, { pitchClass: true, sharps: true }) // => \"C#\"\n * // it rounds to nearest note\n * Note.fromMidi(61.7) // => \"D4\"\n */\nexport function fromMidi(num, options = {}) {\n  num = Math.round(num);\n  const pcs = options.sharps === true ? SHARPS : FLATS;\n  const pc = pcs[num % 12];\n  if (options.pitchClass) return pc;\n  const o = Math.floor(num / 12) - 1;\n  return pc + o;\n}\n\n/**\n * Simplify the note: find an enhramonic note with less accidentals.\n *\n * @param {string} note - the note to be simplified\n * @param {object} options\n * - sameAccType: default true. Use same kind of accidentals that source\n * @return {string} the simplfiied note or null if not valid note\n * @example\n * Note.simplify(\"C##\") // => \"D\"\n * Note.simplify(\"C###\") // => \"D#\"\n * Note.simplify(\"C###\", { sameAccType : false }) // => \"Eb\"\n * Note.simplify(\"B#4\") // => \"C5\"\n */\nexport function simplify(note, options = {}) {\n  const { alt, chroma, midi } = props(note);\n  if (chroma === null) return null;\n\n  const sharps = options.sameAccType === false ? alt < 0 : alt > 0;\n  const pitchClass = midi === null;\n\n  return fromMidi(midi || chroma, { sharps, pitchClass });\n}\n\n/**\n * Get the simplified and enhramonic note of the given one.\n *\n * @param {string} note\n * @return {string} the enhramonic note\n * @example\n * Note.enharmonic(\"Db\") // => \"C#\"\n * Note.enhramonic(\"C\") // => \"C\"\n */\nexport function enharmonic(note) {\n  return simplify(note, false);\n}\n","import { props, name } from \"../note\";\nconst isArray = Array.isArray;\n\n/**\n * Tonal array utilities. Sort notes by pitch, remove duplicates,\n * create ranges with notes or numbers.\n *\n * ## Usage\n *\n * @example\n * import Array from 'tonal/array';\n * Array.sort([\"f\", \"a\", \"c\"])\n *\n * @example\n * const Tonal = require(\"tonal\")\n * Tonal.Array.range(1, 4)\n *\n * ## API\n *\n * @module Array\n */\nexport default {\n  range,\n  rotate,\n  compact,\n  sort,\n  sortedUniq,\n  shuffle,\n  permutations\n};\n\n// ascending range\nfunction ascR(b, n) {\n  const a = [];\n  for (; n--; a[n] = n + b);\n  return a;\n}\n// descending range\nfunction descR(b, n) {\n  const a = [];\n  for (; n--; a[n] = b - n);\n  return a;\n}\n\n/**\n * Assert the value is an array\n * @private\n */\nexport function assert(array, msg = \"Must be an array.\") {\n  if (!isArray(array)) throw Error(msg + \" Was: \" + array);\n}\n\n/**\n * Create a numeric range\n *\n * @param {number} from\n * @param {number} to\n * @return {Array<number>}\n *\n * @example\n * Array.range(-2, 2) // => [-2, -1, 0, 1, 2]\n * Array.range(2, -2) // => [2, 1, 0, -1, -2]\n */\nexport function range(a, b) {\n  return a === null || b === null\n    ? []\n    : a < b\n    ? ascR(a, b - a + 1)\n    : descR(a, a - b + 1);\n}\n\n/**\n *\n * Rotates a list a number of times. It\"s completly agnostic about the\n * contents of the list.\n *\n * @param {Integer} times - the number of rotations\n * @param {Array} array\n * @return {Array} the rotated array\n *\n * @example\n * Array.rotate(1, [1, 2, 3]) // => [2, 3, 1]\n */\nexport function rotate(times, arr) {\n  const len = arr.length;\n  const n = ((times % len) + len) % len;\n  return arr.slice(n, len).concat(arr.slice(0, n));\n}\n\n/**\n * Return a copy of the array with the null values removed\n * @function\n * @param {Array} array\n * @return {Array}\n *\n * @example\n * Array.compact([\"a\", \"b\", null, \"c\"]) // => [\"a\", \"b\", \"c\"]\n */\nexport function compact(arr) {\n  return arr.filter(n => n === 0 || n);\n}\n\n// a function that get note heights (with negative number for pitch classes)\nconst height = name => {\n  const m = props(name).midi;\n  return m !== null ? m : props(name + \"-100\").midi;\n};\n\n/**\n * Sort an array of notes in ascending order. Pitch classes are listed\n * before notes. Any string that is not a note is removed.\n *\n * @param {Array<string>} notes\n * @return {Array<string>} sorted array of notes\n *\n * @example\n * Array.sort(['c2', 'c5', 'c1', 'c0', 'c6', 'c'])\n * // => ['C', 'C0', 'C1', 'C2', 'C5', 'C6']\n * Array.sort(['c', 'F', 'G', 'a', 'b', 'h', 'J'])\n * // => ['C', 'F', 'G', 'A', 'B']\n */\nexport function sort(src) {\n  return compact(src.map(name)).sort((a, b) => height(a) > height(b));\n}\n\n/**\n * Get sorted notes with duplicates removed. Pitch classes are listed\n * before notes.\n *\n * @function\n * @param {Array<string>} array\n * @return {Array<string>} unique sorted notes\n *\n * @example\n * Array.sortedUniq(['a', 'b', 'c2', '1p', 'p2', 'c2', 'b', 'c', 'c3' ])\n * // => [ 'C', 'A', 'B', 'C2', 'C3' ]\n */\nexport function sortedUniq(arr) {\n  return sort(arr).filter((n, i, a) => i === 0 || n !== a[i - 1]);\n}\n\n/**\n * Randomizes the order of the specified array in-place, using the Fisher–Yates shuffle.\n *\n * @function\n * @param {Array} array\n * @return {Array} the array shuffled\n *\n * @example\n * Array.shuffle([\"C\", \"D\", \"E\", \"F\"]) // => [...]\n */\nexport function shuffle(arr, rnd = Math.random) {\n  let i, t;\n  let m = arr.length;\n  while (m) {\n    i = (rnd() * m--) | 0;\n    t = arr[m];\n    arr[m] = arr[i];\n    arr[i] = t;\n  }\n  return arr;\n}\n\n/**\n * Get all permutations of an array\n * http://stackoverflow.com/questions/9960908/permutations-in-javascript\n *\n * @param {Array} array - the array\n * @return {Array<Array>} an array with all the permutations\n * @example\n * Array.permutations([\"a\", \"b\", \"c\"])) // =>\n * [\n *   [\"a\", \"b\", \"c\"],\n *   [\"b\", \"a\", \"c\"],\n *   [\"b\", \"c\", \"a\"],\n *   [\"a\", \"c\", \"b\"],\n *   [\"c\", \"a\", \"b\"],\n *   [\"c\", \"b\", \"a\"]\n * ]\n *\n */\nexport function permutations(arr) {\n  if (arr.length === 0) return [[]];\n  return permutations(arr.slice(1)).reduce(function(acc, perm) {\n    return acc.concat(\n      arr.map(function(e, pos) {\n        const newPerm = perm.slice();\n        newPerm.splice(pos, 0, arr[0]);\n        return newPerm;\n      })\n    );\n  }, []);\n}\n","/**\n * A collection of functions to create and manipulate music intervals.\n *\n * The intervals are strings in shorthand notation. Two variations are supported:\n *\n * - standard shorthand notation: type and number, for example: \"M3\", \"d-4\"\n * - inverse shorthand notation: number and then type, for example: \"3M\", \"-4d\"\n *\n * The problem with the standard shorthand notation is that some strings can be\n * parsed as notes or intervals, for example: \"A4\" can be note A in 4th octave\n * or an augmented four. To remove ambiguity, the prefered notation in tonal is the\n * inverse shortand notation.\n *\n * This is part of [tonal](https://www.npmjs.com/package/tonal) music theory library.\n *\n * ## Usage\n *\n * With Es6 modules:\n *\n * ```js\n * import Interval from \"tonal/interval\"\n * Interval.semitones(\"4P\") // => 5\n * Interval.invert(\"3m\") // => \"6M\"\n * Interval.simplify(\"9m\") // => \"2m\"\n * ```\n *\n * ES5 modules:\n *\n * ```js\n * const Tonal = require('tonal')\n * Tonal.Interval.semitones(\"4P\") // => 5\n * ```\n *\n * ## API\n *\n * @module Interval\n */\nexport default {\n  tokenize,\n  props,\n  simplify,\n  invert,\n  names,\n  num,\n  name,\n  fromProps,\n  chroma,\n  ic,\n  semitones,\n  fromSemitones\n};\n\n// shorthand tonal notation (with quality after number)\nconst IVL_TNL = \"([-+]?\\\\d+)(d{1,4}|m|M|P|A{1,4})\";\n// standard shorthand notation (with quality before number)\nconst IVL_STR = \"(AA|A|P|M|m|d|dd)([-+]?\\\\d+)\";\nconst REGEX = new RegExp(\"^\" + IVL_TNL + \"|\" + IVL_STR + \"$\");\nconst SIZES = [0, 2, 4, 5, 7, 9, 11];\nconst TYPES = \"PMMPPMM\";\nconst CLASSES = [0, 1, 2, 3, 4, 5, 6, 5, 4, 3, 2, 1];\nconst NAMES = \"1P 2m 2M 3m 3M 4P 5P 6m 6M 7m 7M 8P\".split(\" \");\n\n/**\n * List basic (perfect, major, minor) interval names within a octave\n * @param {string} qualities - (Optional, default \"PMm\") the valid types\n * @return {Array} the interval names\n * @example\n * Interval.names() // => [ \"1P\", \"2m\", \"2M\", \"3m\", \"3M\", \"4P\", \"5P\", \"6m\", \"6M\", \"7m\", \"7M\", \"8P\" ]\n * Interval.names(\"P\") // => [ \"1P\", \"4P\", \"5P\", \"8P\" ]\n * Interval.names(\"PM\") // => [ \"1P\", \"2M\", \"3M\", \"4P\", \"5P\", \"6M\", \"7M\", \"8P\" ]\n * Interval.names(\"Pm\") // => [ \"1P\", \"2m\", \"3m\", \"4P\", \"5P\", \"6m\", \"7m\", \"8P\" ]\n * Interval.names(\"d\") // => []\n */\nexport function names(types) {\n  return typeof types !== \"string\"\n    ? NAMES.slice()\n    : NAMES.filter(n => types.indexOf(n[1]) !== -1);\n}\n\n/**\n * Split a interval string into its parts\n *\n * It returns an array with the shape [number, type]\n * @param {string} interval - the interval string\n * @return {Array<String>}\n *\n * @example\n * Interval.tokenize(\"-2M\") //=> [\"-2\", \"M\"]\n */\nexport function tokenize(str) {\n  const m = REGEX.exec(str);\n  return m === null ? null : m[1] ? [m[1], m[2]] : [m[4], m[3]];\n}\n\nconst NO_IVL = Object.freeze({\n  name: null,\n  num: null,\n  q: null,\n  step: null,\n  alt: null,\n  dir: null,\n  type: null,\n  simple: null,\n  semitones: null,\n  chroma: null\n});\n\nconst fillStr = (s, n) => Array(Math.abs(n) + 1).join(s);\n\nconst qToAlt = (type, q) => {\n  if (q === \"M\" && type === \"M\") return 0;\n  if (q === \"P\" && type === \"P\") return 0;\n  if (q === \"m\" && type === \"M\") return -1;\n  if (/^A+$/.test(q)) return q.length;\n  if (/^d+$/.test(q)) return type === \"P\" ? -q.length : -q.length - 1;\n  return null;\n};\n\nconst altToQ = (type, alt) => {\n  if (alt === 0) return type === \"M\" ? \"M\" : \"P\";\n  else if (alt === -1 && type === \"M\") return \"m\";\n  else if (alt > 0) return fillStr(\"A\", alt);\n  else if (alt < 0) return fillStr(\"d\", type === \"P\" ? alt : alt + 1);\n  else return null;\n};\n\nconst numToStep = num => (Math.abs(num) - 1) % 7;\n\nconst properties = str => {\n  const t = tokenize(str);\n  if (t === null) return NO_IVL;\n  const p = { num: +t[0], q: t[1] };\n  p.step = numToStep(p.num);\n  p.type = TYPES[p.step];\n  if (p.type === \"M\" && p.q === \"P\") return NO_IVL;\n\n  p.name = \"\" + p.num + p.q;\n  p.dir = p.num < 0 ? -1 : 1;\n  p.simple = p.num === 8 || p.num === -8 ? p.num : p.dir * (p.step + 1);\n  p.alt = qToAlt(p.type, p.q);\n  p.oct = Math.floor((Math.abs(p.num) - 1) / 7);\n  p.semitones = p.dir * (SIZES[p.step] + p.alt + 12 * p.oct);\n  p.chroma = (((p.dir * (SIZES[p.step] + p.alt)) % 12) + 12) % 12;\n  return Object.freeze(p);\n};\n\nconst cache = {};\n/**\n * Get interval properties. It returns an object with:\n *\n * - name: name\n * - num: number\n * - q: quality\n * - step: step\n * - alt: alteration\n * - dir: direction (1 ascending, -1 descending)\n * - type: \"P\" or \"M\" for perfectable or majorable\n * - simple: the simplified number\n * - semitones: the size in semitones\n * - chroma: the interval chroma\n * - ic: the interval class\n *\n * @function\n * @param {string} interval - the interval\n * @return {Object} the interval in the form [number, alt]\n */\nexport function props(str) {\n  if (typeof str !== \"string\") return NO_IVL;\n  return cache[str] || (cache[str] = properties(str));\n}\n\n/**\n * Get the number of the interval\n *\n * @function\n * @param {string} interval - the interval\n * @return {Integer}\n * @example\n * Interval.num(\"m2\") // => 2\n * Interval.num(\"P9\") // => 9\n * Interval.num(\"P-4\") // => -4\n */\nexport function num(str) {\n  return props(str).num;\n}\n\n/**\n * Get interval name. Can be used to test if it\"s an interval. It accepts intervals\n * as pitch or string in shorthand notation or tonal notation. It returns always\n * intervals in tonal notation.\n *\n * @function\n * @param {string} interval - the interval string or array\n * @return {string} the interval name or null if not valid interval\n * @example\n * Interval.name(\"m-3\") // => \"-3m\"\n * Interval.name(\"3\") // => null\n */\nexport function name(str) {\n  return props(str).name;\n}\n\n/**\n * Get size in semitones of an interval\n *\n * @function\n * @param {string} ivl\n * @return {Integer} the number of semitones or null if not an interval\n * @example\n * import { semitones } from \"tonal-interval\"\n * semitones(\"P4\") // => 5\n * // or using tonal\n * Tonal.Interval.semitones(\"P5\") // => 7\n */\nexport function semitones(str) {\n  return props(str).semitones;\n}\n\n/**\n * Get the chroma of the interval. The chroma is a number between 0 and 7\n * that represents the position within an octave (pitch set)\n *\n * @function\n * @param {string} str\n * @return {number}\n */\nexport function chroma(str) {\n  return props(str).chroma;\n}\n\n/**\n * Get the [interval class](https://en.wikipedia.org/wiki/Interval_class)\n * number of a given interval.\n *\n * In musical set theory, an interval class is the shortest distance in\n * pitch class space between two unordered pitch classes\n *\n * @function\n * @param {String|Integer} interval - the interval or the number of semitones\n * @return {Integer} A value between 0 and 6\n *\n * @example\n * Interval.ic(\"P8\") // => 0\n * Interval.ic(\"m6\") // => 4\n * Interval.ic(10) // => 2\n * [\"P1\", \"M2\", \"M3\", \"P4\", \"P5\", \"M6\", \"M7\"].map(ic) // => [0, 2, 4, 5, 5, 3, 1]\n */\nexport function ic(ivl) {\n  if (typeof ivl === \"string\") ivl = props(ivl).chroma;\n  return typeof ivl === \"number\" ? CLASSES[ivl % 12] : null;\n}\n\n/**\n * Given a interval props object, get the interval name\n *\n * The properties must contain a `num` *or* `step`, and `alt`:\n *\n * - num: the interval number\n * - step: the interval step (overrides the num property)\n * - alt: the interval alteration\n * - oct: (Optional) the number of octaves\n * - dir: (Optional) the direction\n *\n * @function\n * @param {Object} props - the interval property object\n *\n * @return {string} the interval name\n * @example\n * Interval.fromProps({ step: 1, alt: -1, oct: 0, dir: 1 }) // => \"1d\"\n * Interval.fromProps({ num: 9, alt: -1 }) // => \"9m\"\n */\nexport function fromProps({ num, step, alt, oct = 1, dir } = {}) {\n  if (step !== undefined) num = step + 1 + 7 * oct;\n  if (num === undefined) return null;\n\n  const d = dir < 0 ? \"-\" : \"\";\n  const type = TYPES[numToStep(num)];\n  return d + num + altToQ(type, alt);\n}\n\n/**\n * Get the simplified version of an interval.\n *\n * @function\n * @param {string} interval - the interval to simplify\n * @return {string} the simplified interval\n *\n * @example\n * Interval.simplify(\"9M\") // => \"2M\"\n * [\"8P\", \"9M\", \"10M\", \"11P\", \"12P\", \"13M\", \"14M\", \"15P\"].map(Interval.simplify)\n * // => [ \"8P\", \"2M\", \"3M\", \"4P\", \"5P\", \"6M\", \"7M\", \"8P\" ]\n * Interval.simplify(\"2M\") // => \"2M\"\n * Interval.simplify(\"-2M\") // => \"7m\"\n */\nexport function simplify(str) {\n  const p = props(str);\n  if (p === NO_IVL) return null;\n  return p.simple + p.q;\n}\n\n/**\n * Get the inversion (https://en.wikipedia.org/wiki/Inversion_(music)#Intervals)\n * of an interval.\n *\n * @function\n * @param {string} interval - the interval to invert in interval shorthand\n * notation or interval array notation\n * @return {string} the inverted interval\n *\n * @example\n * Interval.invert(\"3m\") // => \"6M\"\n * Interval.invert(\"2M\") // => \"7m\"\n */\nexport function invert(str) {\n  const p = props(str);\n  if (p === NO_IVL) return null;\n  const step = (7 - p.step) % 7;\n  const alt = p.type === \"P\" ? -p.alt : -(p.alt + 1);\n  return fromProps({ step, alt, oct: p.oct, dir: p.dir });\n}\n\n// interval numbers\nvar IN = [1, 2, 2, 3, 3, 4, 5, 5, 6, 6, 7, 7];\n// interval qualities\nvar IQ = \"P m M m M P d P m M m M\".split(\" \");\n\n/**\n * Get interval name from semitones number. Since there are several interval\n * names for the same number, the name it\"s arbitraty, but deterministic.\n *\n * @function\n * @param {Integer} num - the number of semitones (can be negative)\n * @return {string} the interval name\n * @example\n * import { fromSemitones } from \"tonal-interval\"\n * fromSemitones(7) // => \"5P\"\n * // or using tonal\n * Tonal.Distance.fromSemitones(-7) // => \"-5P\"\n */\nexport function fromSemitones(num) {\n  var d = num < 0 ? -1 : 1;\n  var n = Math.abs(num);\n  var c = n % 12;\n  var o = Math.floor(n / 12);\n  return d * (IN[c] + 7 * o) + IQ[c];\n}\n","import { props as noteProps, fromProps as fromNote } from \"../note\";\nimport { props as intervalProps, fromProps as fromInterval } from \"../interval\";\n\n/**\n * Transpose notes by intervals and find distances between notes\n *\n * ## Usage\n *\n * @example\n * import Distance from \"tonal/distance\"\n * Distance.interval(\"C3\", \"C4\") // => \"1P\"\n *\n * @example\n * // es6 import selected functions\n * import { interval, semitones, transpose } from \"tonal/distance\"\n *\n * semitones(\"C\" ,\"D\") // => 2\n * interval(\"C4\", \"G4\") // => \"5P\"\n * transpose(\"C4\", \"P5\") // => \"G4\"\n *\n * @example\n * const Tonal = require(\"tonal\");\n * Tonal.Distance.transpose(\"C4\", \"P5\")\n * Tonal.Distance.transposeBy(\"P5\", \"C4\")\n *\n * ## API\n *\n * @module Distance\n */\nexport default {\n  transpose,\n  transposeBy,\n  add,\n  subtract,\n  interval,\n  semitones,\n  fifths,\n  trFifths\n};\n// Map from letter step to number of fifths starting from \"C\":\n// { C: 0, D: 2, E: 4, F: -1, G: 1, A: 3, B: 5 }\nconst FIFTHS = [0, 2, 4, -1, 1, 3, 5];\n\n// Given a number of fifths, return the octaves they span\nconst fOcts = f => Math.floor((f * 7) / 12);\n\n// Get the number of octaves it span each step\nconst FIFTH_OCTS = FIFTHS.map(fOcts);\n\nconst encode = ({ step, alt, oct, dir = 1 }) => {\n  const f = FIFTHS[step] + 7 * alt;\n  if (oct === null) return [dir * f];\n  const o = oct - FIFTH_OCTS[step] - 4 * alt;\n  return [dir * f, dir * o];\n};\n\n// We need to get the steps from fifths\n// Fifths for CDEFGAB are [ 0, 2, 4, -1, 1, 3, 5 ]\n// We add 1 to fifths to avoid negative numbers, so:\n// for [\"F\", \"C\", \"G\", \"D\", \"A\", \"E\", \"B\"] we have:\nconst STEPS = [3, 0, 4, 1, 5, 2, 6];\n\n// Return the number of fifths as if it were unaltered\nfunction unaltered(f) {\n  const i = (f + 1) % 7;\n  return i < 0 ? 7 + i : i;\n}\n\nconst decode = (f, o, dir) => {\n  const step = STEPS[unaltered(f)];\n  const alt = Math.floor((f + 1) / 7);\n  if (o === undefined) return { step, alt, dir };\n  const oct = o + 4 * alt + FIFTH_OCTS[step];\n  return { step, alt, oct, dir };\n};\n\nconst memo = (fn, cache = {}) => str => cache[str] || (cache[str] = fn(str));\n\nconst encoder = props =>\n  memo(str => {\n    const p = props(str);\n    return p.name === null ? null : encode(p);\n  });\n\nconst encodeNote = encoder(noteProps);\nconst encodeIvl = encoder(intervalProps);\n\n/**\n * Transpose a note by an interval. The note can be a pitch class.\n *\n * This function can be partially applied.\n *\n * @param {string} note\n * @param {string} interval\n * @return {string} the transposed note\n * @example\n * import { tranpose } from \"tonal-distance\"\n * transpose(\"d3\", \"3M\") // => \"F#3\"\n * // it works with pitch classes\n * transpose(\"D\", \"3M\") // => \"F#\"\n * // can be partially applied\n * [\"C\", \"D\", \"E\", \"F\", \"G\"].map(transpose(\"M3)) // => [\"E\", \"F#\", \"G#\", \"A\", \"B\"]\n */\nexport function transpose(note, interval) {\n  if (arguments.length === 1) return i => transpose(note, i);\n  const n = encodeNote(note);\n  const i = encodeIvl(interval);\n  if (n === null || i === null) return null;\n  const tr = n.length === 1 ? [n[0] + i[0]] : [n[0] + i[0], n[1] + i[1]];\n  return fromNote(decode(tr[0], tr[1]));\n}\n\n/**\n * Transpose a pitch class by a number of perfect fifths.\n *\n * It can be partially applied.\n *\n * @function\n * @param {string} pitchClass - the pitch class\n * @param {Integer} fifhts - the number of fifths\n * @return {string} the transposed pitch class\n *\n * @example\n * import { trFifths } from \"tonal-transpose\"\n * [0, 1, 2, 3, 4].map(trFifths(\"C\")) // => [\"C\", \"G\", \"D\", \"A\", \"E\"]\n * // or using tonal\n * Distance.trFifths(\"G4\", 1) // => \"D\"\n */\n\nexport function trFifths(note, fifths) {\n  if (arguments.length === 1) return f => trFifths(note, f);\n  const n = encodeNote(note);\n  if (n === null) return null;\n  return fromNote(decode(n[0] + fifths));\n}\n\n/**\n * Get the distance in fifths between pitch classes\n *\n * Can be partially applied.\n *\n * @param {string} to - note or pitch class\n * @param {string} from - note or pitch class\n */\nexport function fifths(from, to) {\n  if (arguments.length === 1) return to => fifths(from, to);\n  const f = encodeNote(from);\n  const t = encodeNote(to);\n  if (t === null || f === null) return null;\n  return t[0] - f[0];\n}\n\n/**\n * The same as transpose with the arguments inverted.\n *\n * Can be partially applied.\n *\n * @param {string} note\n * @param {string} interval\n * @return {string} the transposed note\n * @example\n * import { tranposeBy } from \"tonal-distance\"\n * transposeBy(\"3m\", \"5P\") // => \"7m\"\n */\nexport function transposeBy(interval, note) {\n  if (arguments.length === 1) return n => transpose(n, interval);\n  return transpose(note, interval);\n}\n\nconst isDescending = e => e[0] * 7 + e[1] * 12 < 0;\nconst decodeIvl = i =>\n  isDescending(i) ? decode(-i[0], -i[1], -1) : decode(i[0], i[1], 1);\n\nexport function addIntervals(ivl1, ivl2, dir) {\n  const i1 = encodeIvl(ivl1);\n  const i2 = encodeIvl(ivl2);\n  if (i1 === null || i2 === null) return null;\n  const i = [i1[0] + dir * i2[0], i1[1] + dir * i2[1]];\n  return fromInterval(decodeIvl(i));\n}\n\n/**\n * Add two intervals\n *\n * Can be partially applied.\n *\n * @param {string} interval1\n * @param {string} interval2\n * @return {string} the resulting interval\n * @example\n * import { add } from \"tonal-distance\"\n * add(\"3m\", \"5P\") // => \"7m\"\n */\nexport function add(ivl1, ivl2) {\n  if (arguments.length === 1) return i2 => add(ivl1, i2);\n  return addIntervals(ivl1, ivl2, 1);\n}\n\n/**\n * Subtract two intervals\n *\n * Can be partially applied\n *\n * @param {string} minuend\n * @param {string} subtrahend\n * @return {string} interval diference\n */\nexport function subtract(ivl1, ivl2) {\n  if (arguments.length === 1) return i2 => add(ivl1, i2);\n  return addIntervals(ivl1, ivl2, -1);\n}\n\n/**\n * Find the interval between two pitches. It works with pitch classes\n * (both must be pitch classes and the interval is always ascending)\n *\n * Can be partially applied\n *\n * @param {string} from - distance from\n * @param {string} to - distance to\n * @return {string} the interval distance\n *\n * @example\n * import { interval } from \"tonal-distance\"\n * interval(\"C2\", \"C3\") // => \"P8\"\n * interval(\"G\", \"B\") // => \"M3\"\n *\n * @example\n * import * as Distance from \"tonal-distance\"\n * Distance.interval(\"M2\", \"P5\") // => \"P4\"\n */\nexport function interval(from, to) {\n  if (arguments.length === 1) return t => interval(from, t);\n  const f = encodeNote(from);\n  const t = encodeNote(to);\n  if (f === null || t === null || f.length !== t.length) return null;\n  const d =\n    f.length === 1\n      ? [t[0] - f[0], -Math.floor(((t[0] - f[0]) * 7) / 12)]\n      : [t[0] - f[0], t[1] - f[1]];\n  return fromInterval(decodeIvl(d));\n}\n\n/**\n * Get the distance between two notes in semitones\n *\n * @param {String|Pitch} from - first note\n * @param {String|Pitch} to - last note\n * @return {Integer} the distance in semitones or null if not valid notes\n * @example\n * import { semitones } from \"tonal-distance\"\n * semitones(\"C3\", \"A2\") // => -3\n * // or use tonal\n * Tonal.Distance.semitones(\"C3\", \"G3\") // => 7\n */\nexport function semitones(from, to) {\n  if (arguments.length === 1) return t => semitones(from, t);\n  const f = noteProps(from);\n  const t = noteProps(to);\n  return f.midi !== null && t.midi !== null\n    ? t.midi - f.midi\n    : f.chroma !== null && t.chroma !== null\n    ? (t.chroma - f.chroma + 12) % 12\n    : null;\n}\n","// CHORDS\n// Format: [\"intervals\", \"full name\", \"abrv1 abrv2\"]\n// Source: https://en.wikibooks.org/wiki/Music_Theory/Complete_List_of_Chord_Patterns\nexport default [\n  // ==Major==\n  [\"1P 3M 5P\", \"major\", \"M \"],\n  [\"1P 3M 5P 7M\", \"major seventh\", \"maj7 Δ ma7 M7 Maj7\"],\n  [\"1P 3M 5P 7M 9M\", \"major ninth\", \"maj9 Δ9\"],\n  [\"1P 3M 5P 7M 9M 13M\", \"major thirteenth\", \"maj13 Maj13\"],\n  [\"1P 3M 5P 6M\", \"sixth\", \"6 add6 add13 M6\"],\n  [\"1P 3M 5P 6M 9M\", \"sixth/ninth\", \"6/9 69\"],\n  [\"1P 3M 5P 7M 11A\", \"lydian\", \"maj#4 Δ#4 Δ#11\"],\n  [\"1P 3M 6m 7M\", \"major seventh b6\", \"M7b6\"],\n  // ==Minor==\n  // '''Normal'''\n  [\"1P 3m 5P\", \"minor\", \"m min -\"],\n  [\"1P 3m 5P 7m\", \"minor seventh\", \"m7 min7 mi7 -7\"],\n  [\"1P 3m 5P 7M\", \"minor/major seventh\", \"m/ma7 m/maj7 mM7 m/M7 -Δ7 mΔ\"],\n  [\"1P 3m 5P 7M\", \"minor/major seventh\", \"m/ma7 m/maj7 mM7 m/M7 -Δ7 mΔ\"],\n  [\"1P 3m 5P 6M\", \"minor sixth\", \"m6\"],\n  [\"1P 3m 5P 7m 9M\", \"minor ninth\", \"m9\"],\n  [\"1P 3m 5P 7m 9M 11P\", \"minor eleventh\", \"m11\"],\n  [\"1P 3m 5P 7m 9M 13M\", \"minor thirteenth\", \"m13\"],\n  // '''Diminished'''\n  [\"1P 3m 5d\", \"diminished\", \"dim ° o\"],\n  [\"1P 3m 5d 7d\", \"diminished seventh\", \"dim7 °7 o7\"],\n  [\"1P 3m 5d 7m\", \"half-diminished\", \"m7b5 ø\"],\n  // ==Dominant/Seventh==\n  // '''Normal'''\n  [\"1P 3M 5P 7m\", \"dominant seventh\", \"7 dom\"],\n  [\"1P 3M 5P 7m 9M\", \"dominant ninth\", \"9\"],\n  [\"1P 3M 5P 7m 9M 13M\", \"dominant thirteenth\", \"13\"],\n  [\"1P 3M 5P 7m 11A\", \"lydian dominant seventh\", \"7#11 7#4\"],\n  // '''Altered'''\n  [\"1P 3M 5P 7m 9m\", \"dominant b9\", \"7b9\"],\n  [\"1P 3M 5P 7m 9A\", \"dominant #9\", \"7#9\"],\n  [\"1P 3M 7m 9m\", \"altered\", \"alt7\"],\n  // '''Suspended'''\n  [\"1P 4P 5P\", \"suspended 4th\", \"sus4\"],\n  [\"1P 2M 5P\", \"suspended 2nd\", \"sus2\"],\n  [\"1P 4P 5P 7m\", \"suspended 4th seventh\", \"7sus4\"],\n  [\"1P 5P 7m 9M 11P\", \"eleventh\", \"11 sus Bb/C for C11\"],\n  [\"1P 4P 5P 7m 9m\", \"suspended 4th b9\", \"b9sus phryg\"],\n  // ==Other==\n  [\"1P 5P\", \"fifth\", \"5\"],\n  [\"1P 3M 5A\", \"augmented\", \"aug + +5\"],\n  [\"1P 3M 5A 7M\", \"augmented seventh\", \"maj7#5 maj7+5\"],\n  [\"1P 3M 5P 7M 9M 11A\", \"major #11 (lydian)\", \"maj9#11 Δ9#11\"],\n  [\"1P 3M 5P 7m 9A\", \"dominant #9\", \"7#9\"],\n  // ==Legacy==\n  [\"1P 2M 4P 5P\", null, \"sus24 sus4add9\"],\n  [\"1P 3M 13m\", null, \"Mb6\"],\n  [\"1P 3M 5A 7M 9M\", null, \"M9#5 Maj9#5\"],\n  [\"1P 3M 5A 7m\", null, \"7#5 +7 7aug aug7\"],\n  [\"1P 3M 5A 7m 9A\", null, \"7#5#9 7alt 7#5#9_ 7#9b13_\"],\n  [\"1P 3M 5A 7m 9M\", null, \"9#5 9+\"],\n  [\"1P 3M 5A 7m 9M 11A\", null, \"9#5#11\"],\n  [\"1P 3M 5A 7m 9m\", null, \"7#5b9\"],\n  [\"1P 3M 5A 7m 9m 11A\", null, \"7#5b9#11\"],\n  [\"1P 3M 5A 9A\", null, \"+add#9\"],\n  [\"1P 3M 5A 9M\", null, \"M#5add9 +add9\"],\n  [\"1P 3M 5P 6M 11A\", null, \"M6#11 M6b5 6#11 6b5\"],\n  [\"1P 3M 5P 6M 7M 9M\", null, \"M7add13\"],\n  [\"1P 3M 5P 6M 9M 11A\", null, \"69#11\"],\n  [\"1P 3M 5P 6m 7m\", null, \"7b6\"],\n  [\"1P 3M 5P 7M 9A 11A\", null, \"Maj7#9#11\"],\n  [\"1P 3M 5P 7M 9M 11A 13M\", null, \"M13#11 maj13#11 M13+4 M13#4\"],\n  [\"1P 3M 5P 7M 9m\", null, \"M7b9\"],\n  [\"1P 3M 5P 7m 11A 13m\", null, \"7#11b13 7b5b13\"],\n  [\"1P 3M 5P 7m 13M\", null, \"7add6 67 7add13\"],\n  [\"1P 3M 5P 7m 9A 11A\", null, \"7#9#11 7b5#9\"],\n  [\"1P 3M 5P 7m 9A 11A 13M\", null, \"13#9#11\"],\n  [\"1P 3M 5P 7m 9A 11A 13m\", null, \"7#9#11b13\"],\n  [\"1P 3M 5P 7m 9A 13M\", null, \"13#9 13#9_\"],\n  [\"1P 3M 5P 7m 9A 13m\", null, \"7#9b13\"],\n  [\"1P 3M 5P 7m 9M 11A\", null, \"9#11 9+4 9#4 9#11_ 9#4_\"],\n  [\"1P 3M 5P 7m 9M 11A 13M\", null, \"13#11 13+4 13#4\"],\n  [\"1P 3M 5P 7m 9M 11A 13m\", null, \"9#11b13 9b5b13\"],\n  [\"1P 3M 5P 7m 9m 11A\", null, \"7b9#11 7b5b9\"],\n  [\"1P 3M 5P 7m 9m 11A 13M\", null, \"13b9#11\"],\n  [\"1P 3M 5P 7m 9m 11A 13m\", null, \"7b9b13#11 7b9#11b13 7b5b9b13\"],\n  [\"1P 3M 5P 7m 9m 13M\", null, \"13b9\"],\n  [\"1P 3M 5P 7m 9m 13m\", null, \"7b9b13\"],\n  [\"1P 3M 5P 7m 9m 9A\", null, \"7b9#9\"],\n  [\"1P 3M 5P 9M\", null, \"Madd9 2 add9 add2\"],\n  [\"1P 3M 5P 9m\", null, \"Maddb9\"],\n  [\"1P 3M 5d\", null, \"Mb5\"],\n  [\"1P 3M 5d 6M 7m 9M\", null, \"13b5\"],\n  [\"1P 3M 5d 7M\", null, \"M7b5\"],\n  [\"1P 3M 5d 7M 9M\", null, \"M9b5\"],\n  [\"1P 3M 5d 7m\", null, \"7b5\"],\n  [\"1P 3M 5d 7m 9M\", null, \"9b5\"],\n  [\"1P 3M 7m\", null, \"7no5\"],\n  [\"1P 3M 7m 13m\", null, \"7b13\"],\n  [\"1P 3M 7m 9M\", null, \"9no5\"],\n  [\"1P 3M 7m 9M 13M\", null, \"13no5\"],\n  [\"1P 3M 7m 9M 13m\", null, \"9b13\"],\n  [\"1P 3m 4P 5P\", null, \"madd4\"],\n  [\"1P 3m 5A\", null, \"m#5 m+ mb6\"],\n  [\"1P 3m 5P 6M 9M\", null, \"m69 _69\"],\n  [\"1P 3m 5P 6m 7M\", null, \"mMaj7b6 mM7b6\"],\n  [\"1P 3m 5P 6m 7M 9M\", null, \"mM9b6 mMaj9b6\"],\n  [\"1P 3m 5P 7M 9M\", null, \"mM9 mMaj9 -M9\"],\n  [\"1P 3m 5P 7m 11P\", null, \"m7add11 m7add4\"],\n  [\"1P 3m 5P 9M\", null, \"madd9\"],\n  [\"1P 3m 5d 6M 7M\", null, \"o7M7\"],\n  [\"1P 3m 5d 7M\", null, \"oM7\"],\n  [\"1P 3m 5d 7m\", null, \"m7b5 half-diminished h7 _7b5\"],\n  [\"1P 3m 6m 7M\", null, \"mb6M7\"],\n  [\"1P 3m 6m 7m\", null, \"m7#5\"],\n  [\"1P 3m 6m 7m 9M\", null, \"m9#5\"],\n  [\"1P 3m 6m 7m 9M 11P\", null, \"m11A\"],\n  [\"1P 3m 6m 9m\", null, \"mb6b9\"],\n  [\"1P 3m 7m 12d 2M\", null, \"m9b5 h9 -9b5\"],\n  [\"1P 3m 7m 12d 2M 4P\", null, \"m11b5 h11 _11b5\"],\n  [\"1P 4P 5A 7M\", null, \"M7#5sus4\"],\n  [\"1P 4P 5A 7M 9M\", null, \"M9#5sus4\"],\n  [\"1P 4P 5A 7m\", null, \"7#5sus4\"],\n  [\"1P 4P 5P 7M\", null, \"M7sus4\"],\n  [\"1P 4P 5P 7M 9M\", null, \"M9sus4\"],\n  [\"1P 4P 5P 7m 9M\", null, \"9sus4 9sus\"],\n  [\"1P 4P 5P 7m 9M 13M\", null, \"13sus4 13sus\"],\n  [\"1P 4P 5P 7m 9m 13m\", null, \"7sus4b9b13 7b9b13sus4\"],\n  [\"1P 4P 7m 10m\", null, \"4 quartal\"],\n  [\"1P 5P 7m 9m 11P\", null, \"11b9\"]\n];\n","import { chroma as noteChroma } from \"../note\";\nimport { chroma as ivlChroma } from \"../interval\";\nimport { rotate, range, compact, assert } from \"../array\";\n\n/**\n *\n * `tonal/pcset` is a collection of functions to work with pitchclass sets.\n * It has methods to compare pitch class sets and to work with pitch class set chromas\n *\n *\n * ## Usage\n *\n * @example\n * import Pcset from \"tonal/pcset\"\n * Pcset.isEqual(\"c2 d5 e6\", \"c6 e3 d1\") // => true\n *\n * @example\n * const Tonal = require('tonal')\n * Tonal.Pcset.chroma(['C', 'D', 'E']) // => \"101010000000\"\n *\n * ## API\n *\n * @module Pcset\n */\nexport default {\n  chroma,\n  chromas,\n  isChroma,\n  intervals,\n  isSubsetOf,\n  isSupersetOf,\n  isEqual,\n  modes,\n  includes,\n  filter\n};\n\nconst pcsetNum = set => parseInt(chroma(set), 2);\nconst numNotes = chroma => chroma.replace(/0/g, \"\").length;\n\n/**\n * Get chroma of a pitch class set. A chroma identifies each set uniquely.\n * It\"s a 12-digit binary each presenting one semitone of the octave.\n *\n * Note that this function accepts a chroma as parameter and return it\n * without modification.\n *\n * @param {Array<string>} set - the pitch class set\n * @return {string} a binary representation of the pitch class set or null\n * @example\n * Pcset.chroma([\"C\", \"D\", \"E\"]) // => \"1010100000000\"\n */\nexport function chroma(set) {\n  if (isChroma(set)) return set;\n  assert(set);\n  let ch, note;\n  const binary = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n  for (let i = 0; i < set.length; i++) {\n    note = set[i];\n    ch = noteChroma(note);\n    if (ch === null) ch = ivlChroma(set[i]);\n    if (ch === null) return null;\n    binary[ch] = 1;\n  }\n  return binary.join(\"\");\n}\n\nlet all = null;\n/**\n * Get a list of all possible chromas (all possible scales)\n * More information: http://allthescales.org/\n * @param [number] numberOfNotes - number of notes of the given chromas. Any by default\n * @return {Array<string>} an array of possible chromas from '10000000000' to '11111111111'\n *\n */\nexport function chromas(n) {\n  all = all || range(2048, 4095).map(n => n.toString(2));\n  return typeof n === \"number\"\n    ? all.filter(chroma => numNotes(chroma) === n)\n    : all.slice();\n}\n\n/**\n * Given a a list of notes or a pcset chroma, produce the rotations\n * of the chroma discarding the ones that starts with \"0\"\n *\n * This is used, for example, to get all the modes of a scale.\n *\n * @param {Array|string} set - the list of notes or pitchChr of the set\n * @param {boolean} normalize - (Optional, true by default) remove all\n * the rotations that starts with \"0\"\n * @return {Array<string>} an array with all the modes of the chroma\n *\n * @example\n * Pcset.modes([\"C\", \"D\", \"E\"]).map(Pcset.intervals)\n */\nexport function modes(set, normalize) {\n  normalize = normalize !== false;\n  const binary = (chroma(set) || \"\").split(\"\");\n  return compact(\n    binary.map(function(_, i) {\n      const r = rotate(i, binary);\n      return normalize && r[0] === \"0\" ? null : r.join(\"\");\n    })\n  );\n}\n\nconst REGEX = /^[01]{12}$/;\n/**\n * Test if the given string is a pitch class set chroma.\n * @param {string} chroma - the pitch class set chroma\n * @return {boolean} true if its a valid pcset chroma\n * @example\n * Pcset.isChroma(\"101010101010\") // => true\n * Pcset.isChroma(\"101001\") // => false\n */\nexport function isChroma(set) {\n  return REGEX.test(set);\n}\n\nconst IVLS = \"1P 2m 2M 3m 3M 4P 5d 5P 6m 6M 7m 7M\".split(\" \");\n/**\n * Given a pcset (notes or chroma) return it\"s intervals\n * @param {string|Array} pcset - the pitch class set (notes or chroma)\n * @return {Array} intervals or empty array if not valid pcset\n * @example\n * Pcset.intervals(\"1010100000000\") => [\"1P\", \"2M\", \"3M\"]\n */\nexport function intervals(set) {\n  if (!isChroma(set)) return [];\n  return compact(\n    set.split(\"\").map(function(d, i) {\n      return d === \"1\" ? IVLS[i] : null;\n    })\n  );\n}\n\n/**\n * Test if two pitch class sets are identical\n *\n * @param {Array|string} set1 - one of the pitch class sets\n * @param {Array|string} set2 - the other pitch class set\n * @return {boolean} true if they are equal\n * @example\n * Pcset.isEqual([\"c2\", \"d3\"], [\"c5\", \"d2\"]) // => true\n */\nexport function isEqual(s1, s2) {\n  if (arguments.length === 1) return s => isEqual(s1, s);\n  return chroma(s1) === chroma(s2);\n}\n\n/**\n * Create a function that test if a collection of notes is a\n * subset of a given set\n *\n * The function can be partially applied\n *\n * @param {Array|string} set - an array of notes or a chroma set string to test against\n * @param {Array|string} notes - an array of notes or a chroma set\n * @return {boolean} true if notes is a subset of set, false otherwise\n * @example\n * const inCMajor = Pcset.isSubsetOf([\"C\", \"E\", \"G\"])\n * inCMajor([\"e6\", \"c4\"]) // => true\n * inCMajor([\"e6\", \"c4\", \"d3\"]) // => false\n */\nexport function isSubsetOf(set, notes) {\n  if (arguments.length > 1) return isSubsetOf(set)(notes);\n  set = pcsetNum(set);\n  return function(notes) {\n    notes = pcsetNum(notes);\n    return notes !== set && (notes & set) === notes;\n  };\n}\n\n/**\n * Create a function that test if a collectio of notes is a\n * superset of a given set (it contains all notes and at least one more)\n *\n * @param {Array|string} set - an array of notes or a chroma set string to test against\n * @param {Array|string} notes - an array of notes or a chroma set\n * @return {boolean} true if notes is a superset of set, false otherwise\n * @example\n * const extendsCMajor = Pcset.isSupersetOf([\"C\", \"E\", \"G\"])\n * extendsCMajor([\"e6\", \"a\", \"c4\", \"g2\"]) // => true\n * extendsCMajor([\"c6\", \"e4\", \"g3\"]) // => false\n */\nexport function isSupersetOf(set, notes) {\n  if (arguments.length > 1) return isSupersetOf(set)(notes);\n  set = pcsetNum(set);\n  return function(notes) {\n    notes = pcsetNum(notes);\n    return notes !== set && (notes | set) === notes;\n  };\n}\n\n/**\n * Test if a given pitch class set includes a note\n *\n * @param {Array<string>} set - the base set to test against\n * @param {string} note - the note to test\n * @return {boolean} true if the note is included in the pcset\n *\n * Can be partially applied\n *\n * @example\n * Pcset.includes([\"C\", \"D\", \"E\"], \"C4\") // => true\n * Pcset.includes([\"C\", \"D\", \"E\"], \"C#4\") // => false\n */\nexport function includes(set, note) {\n  if (arguments.length > 1) return includes(set)(note);\n  set = chroma(set);\n  return note => set[noteChroma(note)] === \"1\";\n}\n\n/**\n * Filter a list with a pitch class set\n *\n * @param {Array|string} set - the pitch class set notes\n * @param {Array|string} notes - the note list to be filtered\n * @return {Array} the filtered notes\n *\n * @example\n * Pcset.filter([\"C\", \"D\", \"E\"], [\"c2\", \"c#2\", \"d2\", \"c3\", \"c#3\", \"d3\"]) // => [ \"c2\", \"d2\", \"c3\", \"d3\" ])\n * Pcset.filter([\"C2\"], [\"c2\", \"c#2\", \"d2\", \"c3\", \"c#3\", \"d3\"]) // => [ \"c2\", \"c3\" ])\n */\nexport function filter(set, notes) {\n  if (arguments.length === 1) return n => filter(set, n);\n  return notes.filter(includes(set));\n}\n","/*!\n * @overview RSVP - a tiny implementation of Promises/A+.\n * @copyright Copyright (c) 2016 Yehuda Katz, Tom Dale, Stefan Penner and contributors\n * @license   Licensed under MIT license\n *            See https://raw.githubusercontent.com/tildeio/rsvp.js/master/LICENSE\n * @version   4.7.0+2254ba40\n */\n\nfunction callbacksFor(object) {\n  var callbacks = object._promiseCallbacks;\n\n  if (!callbacks) {\n    callbacks = object._promiseCallbacks = {};\n  }\n\n  return callbacks;\n}\n\n/**\n  @class RSVP.EventTarget\n*/\nvar EventTarget = {\n\n  /**\n    `RSVP.EventTarget.mixin` extends an object with EventTarget methods. For\n    Example:\n     ```javascript\n    let object = {};\n     RSVP.EventTarget.mixin(object);\n     object.on('finished', function(event) {\n      // handle event\n    });\n     object.trigger('finished', { detail: value });\n    ```\n     `EventTarget.mixin` also works with prototypes:\n     ```javascript\n    let Person = function() {};\n    RSVP.EventTarget.mixin(Person.prototype);\n     let yehuda = new Person();\n    let tom = new Person();\n     yehuda.on('poke', function(event) {\n      console.log('Yehuda says OW');\n    });\n     tom.on('poke', function(event) {\n      console.log('Tom says OW');\n    });\n     yehuda.trigger('poke');\n    tom.trigger('poke');\n    ```\n     @method mixin\n    @for RSVP.EventTarget\n    @private\n    @param {Object} object object to extend with EventTarget methods\n  */\n  mixin: function (object) {\n    object['on'] = this['on'];\n    object['off'] = this['off'];\n    object['trigger'] = this['trigger'];\n    object._promiseCallbacks = undefined;\n    return object;\n  },\n\n\n  /**\n    Registers a callback to be executed when `eventName` is triggered\n     ```javascript\n    object.on('event', function(eventInfo){\n      // handle the event\n    });\n     object.trigger('event');\n    ```\n     @method on\n    @for RSVP.EventTarget\n    @private\n    @param {String} eventName name of the event to listen for\n    @param {Function} callback function to be called when the event is triggered.\n  */\n  on: function (eventName, callback) {\n    if (typeof callback !== 'function') {\n      throw new TypeError('Callback must be a function');\n    }\n\n    var allCallbacks = callbacksFor(this),\n        callbacks = void 0;\n\n    callbacks = allCallbacks[eventName];\n\n    if (!callbacks) {\n      callbacks = allCallbacks[eventName] = [];\n    }\n\n    if (callbacks.indexOf(callback)) {\n      callbacks.push(callback);\n    }\n  },\n\n\n  /**\n    You can use `off` to stop firing a particular callback for an event:\n     ```javascript\n    function doStuff() { // do stuff! }\n    object.on('stuff', doStuff);\n     object.trigger('stuff'); // doStuff will be called\n     // Unregister ONLY the doStuff callback\n    object.off('stuff', doStuff);\n    object.trigger('stuff'); // doStuff will NOT be called\n    ```\n     If you don't pass a `callback` argument to `off`, ALL callbacks for the\n    event will not be executed when the event fires. For example:\n     ```javascript\n    let callback1 = function(){};\n    let callback2 = function(){};\n     object.on('stuff', callback1);\n    object.on('stuff', callback2);\n     object.trigger('stuff'); // callback1 and callback2 will be executed.\n     object.off('stuff');\n    object.trigger('stuff'); // callback1 and callback2 will not be executed!\n    ```\n     @method off\n    @for RSVP.EventTarget\n    @private\n    @param {String} eventName event to stop listening to\n    @param {Function} callback optional argument. If given, only the function\n    given will be removed from the event's callback queue. If no `callback`\n    argument is given, all callbacks will be removed from the event's callback\n    queue.\n  */\n  off: function (eventName, callback) {\n    var allCallbacks = callbacksFor(this),\n        callbacks = void 0,\n        index = void 0;\n\n    if (!callback) {\n      allCallbacks[eventName] = [];\n      return;\n    }\n\n    callbacks = allCallbacks[eventName];\n\n    index = callbacks.indexOf(callback);\n\n    if (index !== -1) {\n      callbacks.splice(index, 1);\n    }\n  },\n\n\n  /**\n    Use `trigger` to fire custom events. For example:\n     ```javascript\n    object.on('foo', function(){\n      console.log('foo event happened!');\n    });\n    object.trigger('foo');\n    // 'foo event happened!' logged to the console\n    ```\n     You can also pass a value as a second argument to `trigger` that will be\n    passed as an argument to all event listeners for the event:\n     ```javascript\n    object.on('foo', function(value){\n      console.log(value.name);\n    });\n     object.trigger('foo', { name: 'bar' });\n    // 'bar' logged to the console\n    ```\n     @method trigger\n    @for RSVP.EventTarget\n    @private\n    @param {String} eventName name of the event to be triggered\n    @param {*} options optional value to be passed to any event handlers for\n    the given `eventName`\n  */\n  trigger: function (eventName, options, label) {\n    var allCallbacks = callbacksFor(this),\n        callbacks = void 0,\n        callback = void 0;\n\n    if (callbacks = allCallbacks[eventName]) {\n      // Don't cache the callbacks.length since it may grow\n      for (var i = 0; i < callbacks.length; i++) {\n        callback = callbacks[i];\n\n        callback(options, label);\n      }\n    }\n  }\n};\n\nvar config = {\n  instrument: false\n};\n\nEventTarget['mixin'](config);\n\nfunction configure(name, value) {\n  if (arguments.length === 2) {\n    config[name] = value;\n  } else {\n    return config[name];\n  }\n}\n\nvar queue = [];\n\nfunction scheduleFlush() {\n  setTimeout(function () {\n    for (var i = 0; i < queue.length; i++) {\n      var entry = queue[i];\n\n      var payload = entry.payload;\n\n      payload.guid = payload.key + payload.id;\n      payload.childGuid = payload.key + payload.childId;\n      if (payload.error) {\n        payload.stack = payload.error.stack;\n      }\n\n      config['trigger'](entry.name, entry.payload);\n    }\n    queue.length = 0;\n  }, 50);\n}\n\nfunction instrument(eventName, promise, child) {\n  if (1 === queue.push({\n    name: eventName,\n    payload: {\n      key: promise._guidKey,\n      id: promise._id,\n      eventName: eventName,\n      detail: promise._result,\n      childId: child && child._id,\n      label: promise._label,\n      timeStamp: Date.now(),\n      error: config[\"instrument-with-stack\"] ? new Error(promise._label) : null\n    } })) {\n    scheduleFlush();\n  }\n}\n\n/**\n  `RSVP.Promise.resolve` returns a promise that will become resolved with the\n  passed `value`. It is shorthand for the following:\n\n  ```javascript\n  let promise = new RSVP.Promise(function(resolve, reject){\n    resolve(1);\n  });\n\n  promise.then(function(value){\n    // value === 1\n  });\n  ```\n\n  Instead of writing the above, your code now simply becomes the following:\n\n  ```javascript\n  let promise = RSVP.Promise.resolve(1);\n\n  promise.then(function(value){\n    // value === 1\n  });\n  ```\n\n  @method resolve\n  @static\n  @param {*} object value that the returned promise will be resolved with\n  @param {String} label optional string for identifying the returned promise.\n  Useful for tooling.\n  @return {Promise} a promise that will become fulfilled with the given\n  `value`\n*/\nfunction resolve$1(object, label) {\n  /*jshint validthis:true */\n  var Constructor = this;\n\n  if (object && typeof object === 'object' && object.constructor === Constructor) {\n    return object;\n  }\n\n  var promise = new Constructor(noop, label);\n  resolve(promise, object);\n  return promise;\n}\n\nfunction withOwnPromise() {\n  return new TypeError('A promises callback cannot return that same promise.');\n}\n\nfunction objectOrFunction(x) {\n  var type = typeof x;\n  return x !== null && (type === 'object' || type === 'function');\n}\n\nfunction noop() {}\n\nvar PENDING = void 0;\nvar FULFILLED = 1;\nvar REJECTED = 2;\n\nvar TRY_CATCH_ERROR = { error: null };\n\nfunction getThen(promise) {\n  try {\n    return promise.then;\n  } catch (error) {\n    TRY_CATCH_ERROR.error = error;\n    return TRY_CATCH_ERROR;\n  }\n}\n\nvar tryCatchCallback = void 0;\nfunction tryCatcher() {\n  try {\n    var target = tryCatchCallback;\n    tryCatchCallback = null;\n    return target.apply(this, arguments);\n  } catch (e) {\n    TRY_CATCH_ERROR.error = e;\n    return TRY_CATCH_ERROR;\n  }\n}\n\nfunction tryCatch(fn) {\n  tryCatchCallback = fn;\n  return tryCatcher;\n}\n\nfunction handleForeignThenable(promise, thenable, then$$1) {\n  config.async(function (promise) {\n    var sealed = false;\n    var result = tryCatch(then$$1).call(thenable, function (value) {\n      if (sealed) {\n        return;\n      }\n      sealed = true;\n      if (thenable === value) {\n        fulfill(promise, value);\n      } else {\n        resolve(promise, value);\n      }\n    }, function (reason) {\n      if (sealed) {\n        return;\n      }\n      sealed = true;\n\n      reject(promise, reason);\n    }, 'Settle: ' + (promise._label || ' unknown promise'));\n\n    if (!sealed && result === TRY_CATCH_ERROR) {\n      sealed = true;\n      var error = TRY_CATCH_ERROR.error;\n      TRY_CATCH_ERROR.error = null;\n      reject(promise, error);\n    }\n  }, promise);\n}\n\nfunction handleOwnThenable(promise, thenable) {\n  if (thenable._state === FULFILLED) {\n    fulfill(promise, thenable._result);\n  } else if (thenable._state === REJECTED) {\n    thenable._onError = null;\n    reject(promise, thenable._result);\n  } else {\n    subscribe(thenable, undefined, function (value) {\n      if (thenable === value) {\n        fulfill(promise, value);\n      } else {\n        resolve(promise, value);\n      }\n    }, function (reason) {\n      return reject(promise, reason);\n    });\n  }\n}\n\nfunction handleMaybeThenable(promise, maybeThenable, then$$1) {\n  var isOwnThenable = maybeThenable.constructor === promise.constructor && then$$1 === then && promise.constructor.resolve === resolve$1;\n\n  if (isOwnThenable) {\n    handleOwnThenable(promise, maybeThenable);\n  } else if (then$$1 === TRY_CATCH_ERROR) {\n    var error = TRY_CATCH_ERROR.error;\n    TRY_CATCH_ERROR.error = null;\n    reject(promise, error);\n  } else if (typeof then$$1 === 'function') {\n    handleForeignThenable(promise, maybeThenable, then$$1);\n  } else {\n    fulfill(promise, maybeThenable);\n  }\n}\n\nfunction resolve(promise, value) {\n  if (promise === value) {\n    fulfill(promise, value);\n  } else if (objectOrFunction(value)) {\n    handleMaybeThenable(promise, value, getThen(value));\n  } else {\n    fulfill(promise, value);\n  }\n}\n\nfunction publishRejection(promise) {\n  if (promise._onError) {\n    promise._onError(promise._result);\n  }\n\n  publish(promise);\n}\n\nfunction fulfill(promise, value) {\n  if (promise._state !== PENDING) {\n    return;\n  }\n\n  promise._result = value;\n  promise._state = FULFILLED;\n\n  if (promise._subscribers.length === 0) {\n    if (config.instrument) {\n      instrument('fulfilled', promise);\n    }\n  } else {\n    config.async(publish, promise);\n  }\n}\n\nfunction reject(promise, reason) {\n  if (promise._state !== PENDING) {\n    return;\n  }\n  promise._state = REJECTED;\n  promise._result = reason;\n  config.async(publishRejection, promise);\n}\n\nfunction subscribe(parent, child, onFulfillment, onRejection) {\n  var subscribers = parent._subscribers;\n  var length = subscribers.length;\n\n  parent._onError = null;\n\n  subscribers[length] = child;\n  subscribers[length + FULFILLED] = onFulfillment;\n  subscribers[length + REJECTED] = onRejection;\n\n  if (length === 0 && parent._state) {\n    config.async(publish, parent);\n  }\n}\n\nfunction publish(promise) {\n  var subscribers = promise._subscribers;\n  var settled = promise._state;\n\n  if (config.instrument) {\n    instrument(settled === FULFILLED ? 'fulfilled' : 'rejected', promise);\n  }\n\n  if (subscribers.length === 0) {\n    return;\n  }\n\n  var child = void 0,\n      callback = void 0,\n      result = promise._result;\n\n  for (var i = 0; i < subscribers.length; i += 3) {\n    child = subscribers[i];\n    callback = subscribers[i + settled];\n\n    if (child) {\n      invokeCallback(settled, child, callback, result);\n    } else {\n      callback(result);\n    }\n  }\n\n  promise._subscribers.length = 0;\n}\n\nfunction invokeCallback(state, promise, callback, result) {\n  var hasCallback = typeof callback === 'function';\n  var value = void 0;\n\n  if (hasCallback) {\n    value = tryCatch(callback)(result);\n  } else {\n    value = result;\n  }\n\n  if (promise._state !== PENDING) {\n    // noop\n  } else if (value === promise) {\n    reject(promise, withOwnPromise());\n  } else if (value === TRY_CATCH_ERROR) {\n    var error = TRY_CATCH_ERROR.error;\n    TRY_CATCH_ERROR.error = null; // release\n    reject(promise, error);\n  } else if (hasCallback) {\n    resolve(promise, value);\n  } else if (state === FULFILLED) {\n    fulfill(promise, value);\n  } else if (state === REJECTED) {\n    reject(promise, value);\n  }\n}\n\nfunction initializePromise(promise, resolver) {\n  var resolved = false;\n  try {\n    resolver(function (value) {\n      if (resolved) {\n        return;\n      }\n      resolved = true;\n      resolve(promise, value);\n    }, function (reason) {\n      if (resolved) {\n        return;\n      }\n      resolved = true;\n      reject(promise, reason);\n    });\n  } catch (e) {\n    reject(promise, e);\n  }\n}\n\nfunction then(onFulfillment, onRejection, label) {\n  var parent = this;\n  var state = parent._state;\n\n  if (state === FULFILLED && !onFulfillment || state === REJECTED && !onRejection) {\n    config.instrument && instrument('chained', parent, parent);\n    return parent;\n  }\n\n  parent._onError = null;\n\n  var child = new parent.constructor(noop, label);\n  var result = parent._result;\n\n  config.instrument && instrument('chained', parent, child);\n\n  if (state === PENDING) {\n    subscribe(parent, child, onFulfillment, onRejection);\n  } else {\n    var callback = state === FULFILLED ? onFulfillment : onRejection;\n    config.async(function () {\n      return invokeCallback(state, child, callback, result);\n    });\n  }\n\n  return child;\n}\n\nvar Enumerator = function () {\n  function Enumerator(Constructor, input, abortOnReject, label) {\n    this._instanceConstructor = Constructor;\n    this.promise = new Constructor(noop, label);\n    this._abortOnReject = abortOnReject;\n    this._isUsingOwnPromise = Constructor === Promise;\n    this._isUsingOwnResolve = Constructor.resolve === resolve$1;\n\n    this._init.apply(this, arguments);\n  }\n\n  Enumerator.prototype._init = function _init(Constructor, input) {\n    var len = input.length || 0;\n    this.length = len;\n    this._remaining = len;\n    this._result = new Array(len);\n\n    this._enumerate(input);\n  };\n\n  Enumerator.prototype._enumerate = function _enumerate(input) {\n    var length = this.length;\n    var promise = this.promise;\n\n    for (var i = 0; promise._state === PENDING && i < length; i++) {\n      this._eachEntry(input[i], i, true);\n    }\n\n    this._checkFullfillment();\n  };\n\n  Enumerator.prototype._checkFullfillment = function _checkFullfillment() {\n    if (this._remaining === 0) {\n      fulfill(this.promise, this._result);\n    }\n  };\n\n  Enumerator.prototype._settleMaybeThenable = function _settleMaybeThenable(entry, i, firstPass) {\n    var c = this._instanceConstructor;\n\n    if (this._isUsingOwnResolve) {\n      var then$$1 = getThen(entry);\n\n      if (then$$1 === then && entry._state !== PENDING) {\n        entry._onError = null;\n        this._settledAt(entry._state, i, entry._result, firstPass);\n      } else if (typeof then$$1 !== 'function') {\n        this._settledAt(FULFILLED, i, entry, firstPass);\n      } else if (this._isUsingOwnPromise) {\n        var promise = new c(noop);\n        handleMaybeThenable(promise, entry, then$$1);\n        this._willSettleAt(promise, i, firstPass);\n      } else {\n        this._willSettleAt(new c(function (resolve$$1) {\n          return resolve$$1(entry);\n        }), i, firstPass);\n      }\n    } else {\n      this._willSettleAt(c.resolve(entry), i, firstPass);\n    }\n  };\n\n  Enumerator.prototype._eachEntry = function _eachEntry(entry, i, firstPass) {\n    if (entry !== null && typeof entry === 'object') {\n      this._settleMaybeThenable(entry, i, firstPass);\n    } else {\n      this._setResultAt(FULFILLED, i, entry, firstPass);\n    }\n  };\n\n  Enumerator.prototype._settledAt = function _settledAt(state, i, value, firstPass) {\n    var promise = this.promise;\n\n    if (promise._state === PENDING) {\n      if (this._abortOnReject && state === REJECTED) {\n        reject(promise, value);\n      } else {\n        this._setResultAt(state, i, value, firstPass);\n        this._checkFullfillment();\n      }\n    }\n  };\n\n  Enumerator.prototype._setResultAt = function _setResultAt(state, i, value, firstPass) {\n    this._remaining--;\n    this._result[i] = value;\n  };\n\n  Enumerator.prototype._willSettleAt = function _willSettleAt(promise, i, firstPass) {\n    var _this = this;\n\n    subscribe(promise, undefined, function (value) {\n      return _this._settledAt(FULFILLED, i, value, firstPass);\n    }, function (reason) {\n      return _this._settledAt(REJECTED, i, reason, firstPass);\n    });\n  };\n\n  return Enumerator;\n}();\n\nfunction setSettledResult(state, i, value) {\n  this._remaining--;\n  if (state === FULFILLED) {\n    this._result[i] = {\n      state: 'fulfilled',\n      value: value\n    };\n  } else {\n    this._result[i] = {\n      state: 'rejected',\n      reason: value\n    };\n  }\n}\n\n/**\n  `RSVP.Promise.all` accepts an array of promises, and returns a new promise which\n  is fulfilled with an array of fulfillment values for the passed promises, or\n  rejected with the reason of the first passed promise to be rejected. It casts all\n  elements of the passed iterable to promises as it runs this algorithm.\n\n  Example:\n\n  ```javascript\n  let promise1 = RSVP.resolve(1);\n  let promise2 = RSVP.resolve(2);\n  let promise3 = RSVP.resolve(3);\n  let promises = [ promise1, promise2, promise3 ];\n\n  RSVP.Promise.all(promises).then(function(array){\n    // The array here would be [ 1, 2, 3 ];\n  });\n  ```\n\n  If any of the `promises` given to `RSVP.all` are rejected, the first promise\n  that is rejected will be given as an argument to the returned promises's\n  rejection handler. For example:\n\n  Example:\n\n  ```javascript\n  let promise1 = RSVP.resolve(1);\n  let promise2 = RSVP.reject(new Error(\"2\"));\n  let promise3 = RSVP.reject(new Error(\"3\"));\n  let promises = [ promise1, promise2, promise3 ];\n\n  RSVP.Promise.all(promises).then(function(array){\n    // Code here never runs because there are rejected promises!\n  }, function(error) {\n    // error.message === \"2\"\n  });\n  ```\n\n  @method all\n  @static\n  @param {Array} entries array of promises\n  @param {String} label optional string for labeling the promise.\n  Useful for tooling.\n  @return {Promise} promise that is fulfilled when all `promises` have been\n  fulfilled, or rejected if any of them become rejected.\n  @static\n*/\nfunction all(entries, label) {\n  if (!Array.isArray(entries)) {\n    return this.reject(new TypeError(\"Promise.all must be called with an array\"), label);\n  }\n  return new Enumerator(this, entries, true /* abort on reject */, label).promise;\n}\n\n/**\n  `RSVP.Promise.race` returns a new promise which is settled in the same way as the\n  first passed promise to settle.\n\n  Example:\n\n  ```javascript\n  let promise1 = new RSVP.Promise(function(resolve, reject){\n    setTimeout(function(){\n      resolve('promise 1');\n    }, 200);\n  });\n\n  let promise2 = new RSVP.Promise(function(resolve, reject){\n    setTimeout(function(){\n      resolve('promise 2');\n    }, 100);\n  });\n\n  RSVP.Promise.race([promise1, promise2]).then(function(result){\n    // result === 'promise 2' because it was resolved before promise1\n    // was resolved.\n  });\n  ```\n\n  `RSVP.Promise.race` is deterministic in that only the state of the first\n  settled promise matters. For example, even if other promises given to the\n  `promises` array argument are resolved, but the first settled promise has\n  become rejected before the other promises became fulfilled, the returned\n  promise will become rejected:\n\n  ```javascript\n  let promise1 = new RSVP.Promise(function(resolve, reject){\n    setTimeout(function(){\n      resolve('promise 1');\n    }, 200);\n  });\n\n  let promise2 = new RSVP.Promise(function(resolve, reject){\n    setTimeout(function(){\n      reject(new Error('promise 2'));\n    }, 100);\n  });\n\n  RSVP.Promise.race([promise1, promise2]).then(function(result){\n    // Code here never runs\n  }, function(reason){\n    // reason.message === 'promise 2' because promise 2 became rejected before\n    // promise 1 became fulfilled\n  });\n  ```\n\n  An example real-world use case is implementing timeouts:\n\n  ```javascript\n  RSVP.Promise.race([ajax('foo.json'), timeout(5000)])\n  ```\n\n  @method race\n  @static\n  @param {Array} entries array of promises to observe\n  @param {String} label optional string for describing the promise returned.\n  Useful for tooling.\n  @return {Promise} a promise which settles in the same way as the first passed\n  promise to settle.\n*/\nfunction race(entries, label) {\n  /*jshint validthis:true */\n  var Constructor = this;\n\n  var promise = new Constructor(noop, label);\n\n  if (!Array.isArray(entries)) {\n    reject(promise, new TypeError('Promise.race must be called with an array'));\n    return promise;\n  }\n\n  for (var i = 0; promise._state === PENDING && i < entries.length; i++) {\n    subscribe(Constructor.resolve(entries[i]), undefined, function (value) {\n      return resolve(promise, value);\n    }, function (reason) {\n      return reject(promise, reason);\n    });\n  }\n\n  return promise;\n}\n\n/**\n  `RSVP.Promise.reject` returns a promise rejected with the passed `reason`.\n  It is shorthand for the following:\n\n  ```javascript\n  let promise = new RSVP.Promise(function(resolve, reject){\n    reject(new Error('WHOOPS'));\n  });\n\n  promise.then(function(value){\n    // Code here doesn't run because the promise is rejected!\n  }, function(reason){\n    // reason.message === 'WHOOPS'\n  });\n  ```\n\n  Instead of writing the above, your code now simply becomes the following:\n\n  ```javascript\n  let promise = RSVP.Promise.reject(new Error('WHOOPS'));\n\n  promise.then(function(value){\n    // Code here doesn't run because the promise is rejected!\n  }, function(reason){\n    // reason.message === 'WHOOPS'\n  });\n  ```\n\n  @method reject\n  @static\n  @param {*} reason value that the returned promise will be rejected with.\n  @param {String} label optional string for identifying the returned promise.\n  Useful for tooling.\n  @return {Promise} a promise rejected with the given `reason`.\n*/\nfunction reject$1(reason, label) {\n  /*jshint validthis:true */\n  var Constructor = this;\n  var promise = new Constructor(noop, label);\n  reject(promise, reason);\n  return promise;\n}\n\nvar guidKey = 'rsvp_' + Date.now() + '-';\nvar counter = 0;\n\nfunction needsResolver() {\n  throw new TypeError('You must pass a resolver function as the first argument to the promise constructor');\n}\n\nfunction needsNew() {\n  throw new TypeError(\"Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.\");\n}\n\n/**\n  Promise objects represent the eventual result of an asynchronous operation. The\n  primary way of interacting with a promise is through its `then` method, which\n  registers callbacks to receive either a promise’s eventual value or the reason\n  why the promise cannot be fulfilled.\n\n  Terminology\n  -----------\n\n  - `promise` is an object or function with a `then` method whose behavior conforms to this specification.\n  - `thenable` is an object or function that defines a `then` method.\n  - `value` is any legal JavaScript value (including undefined, a thenable, or a promise).\n  - `exception` is a value that is thrown using the throw statement.\n  - `reason` is a value that indicates why a promise was rejected.\n  - `settled` the final resting state of a promise, fulfilled or rejected.\n\n  A promise can be in one of three states: pending, fulfilled, or rejected.\n\n  Promises that are fulfilled have a fulfillment value and are in the fulfilled\n  state.  Promises that are rejected have a rejection reason and are in the\n  rejected state.  A fulfillment value is never a thenable.\n\n  Promises can also be said to *resolve* a value.  If this value is also a\n  promise, then the original promise's settled state will match the value's\n  settled state.  So a promise that *resolves* a promise that rejects will\n  itself reject, and a promise that *resolves* a promise that fulfills will\n  itself fulfill.\n\n\n  Basic Usage:\n  ------------\n\n  ```js\n  let promise = new Promise(function(resolve, reject) {\n    // on success\n    resolve(value);\n\n    // on failure\n    reject(reason);\n  });\n\n  promise.then(function(value) {\n    // on fulfillment\n  }, function(reason) {\n    // on rejection\n  });\n  ```\n\n  Advanced Usage:\n  ---------------\n\n  Promises shine when abstracting away asynchronous interactions such as\n  `XMLHttpRequest`s.\n\n  ```js\n  function getJSON(url) {\n    return new Promise(function(resolve, reject){\n      let xhr = new XMLHttpRequest();\n\n      xhr.open('GET', url);\n      xhr.onreadystatechange = handler;\n      xhr.responseType = 'json';\n      xhr.setRequestHeader('Accept', 'application/json');\n      xhr.send();\n\n      function handler() {\n        if (this.readyState === this.DONE) {\n          if (this.status === 200) {\n            resolve(this.response);\n          } else {\n            reject(new Error('getJSON: `' + url + '` failed with status: [' + this.status + ']'));\n          }\n        }\n      };\n    });\n  }\n\n  getJSON('/posts.json').then(function(json) {\n    // on fulfillment\n  }, function(reason) {\n    // on rejection\n  });\n  ```\n\n  Unlike callbacks, promises are great composable primitives.\n\n  ```js\n  Promise.all([\n    getJSON('/posts'),\n    getJSON('/comments')\n  ]).then(function(values){\n    values[0] // => postsJSON\n    values[1] // => commentsJSON\n\n    return values;\n  });\n  ```\n\n  @class RSVP.Promise\n  @param {function} resolver\n  @param {String} label optional string for labeling the promise.\n  Useful for tooling.\n  @constructor\n*/\n\nvar Promise = function () {\n  function Promise(resolver, label) {\n    this._id = counter++;\n    this._label = label;\n    this._state = undefined;\n    this._result = undefined;\n    this._subscribers = [];\n\n    config.instrument && instrument('created', this);\n\n    if (noop !== resolver) {\n      typeof resolver !== 'function' && needsResolver();\n      this instanceof Promise ? initializePromise(this, resolver) : needsNew();\n    }\n  }\n\n  Promise.prototype._onError = function _onError(reason) {\n    var _this = this;\n\n    config.after(function () {\n      if (_this._onError) {\n        config.trigger('error', reason, _this._label);\n      }\n    });\n  };\n\n  /**\n    `catch` is simply sugar for `then(undefined, onRejection)` which makes it the same\n    as the catch block of a try/catch statement.\n  \n    ```js\n    function findAuthor(){\n      throw new Error('couldn\\'t find that author');\n    }\n  \n    // synchronous\n    try {\n      findAuthor();\n    } catch(reason) {\n      // something went wrong\n    }\n  \n    // async with promises\n    findAuthor().catch(function(reason){\n      // something went wrong\n    });\n    ```\n  \n    @method catch\n    @param {Function} onRejection\n    @param {String} label optional string for labeling the promise.\n    Useful for tooling.\n    @return {Promise}\n  */\n\n\n  Promise.prototype.catch = function _catch(onRejection, label) {\n    return this.then(undefined, onRejection, label);\n  };\n\n  /**\n    `finally` will be invoked regardless of the promise's fate just as native\n    try/catch/finally behaves\n  \n    Synchronous example:\n  \n    ```js\n    findAuthor() {\n      if (Math.random() > 0.5) {\n        throw new Error();\n      }\n      return new Author();\n    }\n  \n    try {\n      return findAuthor(); // succeed or fail\n    } catch(error) {\n      return findOtherAuthor();\n    } finally {\n      // always runs\n      // doesn't affect the return value\n    }\n    ```\n  \n    Asynchronous example:\n  \n    ```js\n    findAuthor().catch(function(reason){\n      return findOtherAuthor();\n    }).finally(function(){\n      // author was either found, or not\n    });\n    ```\n  \n    @method finally\n    @param {Function} callback\n    @param {String} label optional string for labeling the promise.\n    Useful for tooling.\n    @return {Promise}\n  */\n\n\n  Promise.prototype.finally = function _finally(callback, label) {\n    var promise = this;\n    var constructor = promise.constructor;\n\n    return promise.then(function (value) {\n      return constructor.resolve(callback()).then(function () {\n        return value;\n      });\n    }, function (reason) {\n      return constructor.resolve(callback()).then(function () {\n        throw reason;\n      });\n    }, label);\n  };\n\n  return Promise;\n}();\n\nPromise.all = all;\nPromise.race = race;\nPromise.resolve = resolve$1;\nPromise.reject = reject$1;\n\nPromise.prototype._guidKey = guidKey;\n\n/**\n  The primary way of interacting with a promise is through its `then` method,\n  which registers callbacks to receive either a promise's eventual value or the\n  reason why the promise cannot be fulfilled.\n\n  ```js\n  findUser().then(function(user){\n    // user is available\n  }, function(reason){\n    // user is unavailable, and you are given the reason why\n  });\n  ```\n\n  Chaining\n  --------\n\n  The return value of `then` is itself a promise.  This second, 'downstream'\n  promise is resolved with the return value of the first promise's fulfillment\n  or rejection handler, or rejected if the handler throws an exception.\n\n  ```js\n  findUser().then(function (user) {\n    return user.name;\n  }, function (reason) {\n    return 'default name';\n  }).then(function (userName) {\n    // If `findUser` fulfilled, `userName` will be the user's name, otherwise it\n    // will be `'default name'`\n  });\n\n  findUser().then(function (user) {\n    throw new Error('Found user, but still unhappy');\n  }, function (reason) {\n    throw new Error('`findUser` rejected and we\\'re unhappy');\n  }).then(function (value) {\n    // never reached\n  }, function (reason) {\n    // if `findUser` fulfilled, `reason` will be 'Found user, but still unhappy'.\n    // If `findUser` rejected, `reason` will be '`findUser` rejected and we\\'re unhappy'.\n  });\n  ```\n  If the downstream promise does not specify a rejection handler, rejection reasons will be propagated further downstream.\n\n  ```js\n  findUser().then(function (user) {\n    throw new PedagogicalException('Upstream error');\n  }).then(function (value) {\n    // never reached\n  }).then(function (value) {\n    // never reached\n  }, function (reason) {\n    // The `PedgagocialException` is propagated all the way down to here\n  });\n  ```\n\n  Assimilation\n  ------------\n\n  Sometimes the value you want to propagate to a downstream promise can only be\n  retrieved asynchronously. This can be achieved by returning a promise in the\n  fulfillment or rejection handler. The downstream promise will then be pending\n  until the returned promise is settled. This is called *assimilation*.\n\n  ```js\n  findUser().then(function (user) {\n    return findCommentsByAuthor(user);\n  }).then(function (comments) {\n    // The user's comments are now available\n  });\n  ```\n\n  If the assimliated promise rejects, then the downstream promise will also reject.\n\n  ```js\n  findUser().then(function (user) {\n    return findCommentsByAuthor(user);\n  }).then(function (comments) {\n    // If `findCommentsByAuthor` fulfills, we'll have the value here\n  }, function (reason) {\n    // If `findCommentsByAuthor` rejects, we'll have the reason here\n  });\n  ```\n\n  Simple Example\n  --------------\n\n  Synchronous Example\n\n  ```javascript\n  let result;\n\n  try {\n    result = findResult();\n    // success\n  } catch(reason) {\n    // failure\n  }\n  ```\n\n  Errback Example\n\n  ```js\n  findResult(function(result, err){\n    if (err) {\n      // failure\n    } else {\n      // success\n    }\n  });\n  ```\n\n  Promise Example;\n\n  ```javascript\n  findResult().then(function(result){\n    // success\n  }, function(reason){\n    // failure\n  });\n  ```\n\n  Advanced Example\n  --------------\n\n  Synchronous Example\n\n  ```javascript\n  let author, books;\n\n  try {\n    author = findAuthor();\n    books  = findBooksByAuthor(author);\n    // success\n  } catch(reason) {\n    // failure\n  }\n  ```\n\n  Errback Example\n\n  ```js\n\n  function foundBooks(books) {\n\n  }\n\n  function failure(reason) {\n\n  }\n\n  findAuthor(function(author, err){\n    if (err) {\n      failure(err);\n      // failure\n    } else {\n      try {\n        findBoooksByAuthor(author, function(books, err) {\n          if (err) {\n            failure(err);\n          } else {\n            try {\n              foundBooks(books);\n            } catch(reason) {\n              failure(reason);\n            }\n          }\n        });\n      } catch(error) {\n        failure(err);\n      }\n      // success\n    }\n  });\n  ```\n\n  Promise Example;\n\n  ```javascript\n  findAuthor().\n    then(findBooksByAuthor).\n    then(function(books){\n      // found books\n  }).catch(function(reason){\n    // something went wrong\n  });\n  ```\n\n  @method then\n  @param {Function} onFulfillment\n  @param {Function} onRejection\n  @param {String} label optional string for labeling the promise.\n  Useful for tooling.\n  @return {Promise}\n*/\nPromise.prototype.then = then;\n\nfunction makeObject(_, argumentNames) {\n  var obj = {};\n  var length = _.length;\n  var args = new Array(length);\n\n  for (var x = 0; x < length; x++) {\n    args[x] = _[x];\n  }\n\n  for (var i = 0; i < argumentNames.length; i++) {\n    var name = argumentNames[i];\n    obj[name] = args[i + 1];\n  }\n\n  return obj;\n}\n\nfunction arrayResult(_) {\n  var length = _.length;\n  var args = new Array(length - 1);\n\n  for (var i = 1; i < length; i++) {\n    args[i - 1] = _[i];\n  }\n\n  return args;\n}\n\nfunction wrapThenable(then, promise) {\n  return {\n    then: function (onFulFillment, onRejection) {\n      return then.call(promise, onFulFillment, onRejection);\n    }\n  };\n}\n\n/**\n  `RSVP.denodeify` takes a 'node-style' function and returns a function that\n  will return an `RSVP.Promise`. You can use `denodeify` in Node.js or the\n  browser when you'd prefer to use promises over using callbacks. For example,\n  `denodeify` transforms the following:\n\n  ```javascript\n  let fs = require('fs');\n\n  fs.readFile('myfile.txt', function(err, data){\n    if (err) return handleError(err);\n    handleData(data);\n  });\n  ```\n\n  into:\n\n  ```javascript\n  let fs = require('fs');\n  let readFile = RSVP.denodeify(fs.readFile);\n\n  readFile('myfile.txt').then(handleData, handleError);\n  ```\n\n  If the node function has multiple success parameters, then `denodeify`\n  just returns the first one:\n\n  ```javascript\n  let request = RSVP.denodeify(require('request'));\n\n  request('http://example.com').then(function(res) {\n    // ...\n  });\n  ```\n\n  However, if you need all success parameters, setting `denodeify`'s\n  second parameter to `true` causes it to return all success parameters\n  as an array:\n\n  ```javascript\n  let request = RSVP.denodeify(require('request'), true);\n\n  request('http://example.com').then(function(result) {\n    // result[0] -> res\n    // result[1] -> body\n  });\n  ```\n\n  Or if you pass it an array with names it returns the parameters as a hash:\n\n  ```javascript\n  let request = RSVP.denodeify(require('request'), ['res', 'body']);\n\n  request('http://example.com').then(function(result) {\n    // result.res\n    // result.body\n  });\n  ```\n\n  Sometimes you need to retain the `this`:\n\n  ```javascript\n  let app = require('express')();\n  let render = RSVP.denodeify(app.render.bind(app));\n  ```\n\n  The denodified function inherits from the original function. It works in all\n  environments, except IE 10 and below. Consequently all properties of the original\n  function are available to you. However, any properties you change on the\n  denodeified function won't be changed on the original function. Example:\n\n  ```javascript\n  let request = RSVP.denodeify(require('request')),\n      cookieJar = request.jar(); // <- Inheritance is used here\n\n  request('http://example.com', {jar: cookieJar}).then(function(res) {\n    // cookieJar.cookies holds now the cookies returned by example.com\n  });\n  ```\n\n  Using `denodeify` makes it easier to compose asynchronous operations instead\n  of using callbacks. For example, instead of:\n\n  ```javascript\n  let fs = require('fs');\n\n  fs.readFile('myfile.txt', function(err, data){\n    if (err) { ... } // Handle error\n    fs.writeFile('myfile2.txt', data, function(err){\n      if (err) { ... } // Handle error\n      console.log('done')\n    });\n  });\n  ```\n\n  you can chain the operations together using `then` from the returned promise:\n\n  ```javascript\n  let fs = require('fs');\n  let readFile = RSVP.denodeify(fs.readFile);\n  let writeFile = RSVP.denodeify(fs.writeFile);\n\n  readFile('myfile.txt').then(function(data){\n    return writeFile('myfile2.txt', data);\n  }).then(function(){\n    console.log('done')\n  }).catch(function(error){\n    // Handle error\n  });\n  ```\n\n  @method denodeify\n  @static\n  @for RSVP\n  @param {Function} nodeFunc a 'node-style' function that takes a callback as\n  its last argument. The callback expects an error to be passed as its first\n  argument (if an error occurred, otherwise null), and the value from the\n  operation as its second argument ('function(err, value){ }').\n  @param {Boolean|Array} [options] An optional paramter that if set\n  to `true` causes the promise to fulfill with the callback's success arguments\n  as an array. This is useful if the node function has multiple success\n  paramters. If you set this paramter to an array with names, the promise will\n  fulfill with a hash with these names as keys and the success parameters as\n  values.\n  @return {Function} a function that wraps `nodeFunc` to return an\n  `RSVP.Promise`\n  @static\n*/\nfunction denodeify(nodeFunc, options) {\n  var fn = function () {\n    var l = arguments.length;\n    var args = new Array(l + 1);\n    var promiseInput = false;\n\n    for (var i = 0; i < l; ++i) {\n      var arg = arguments[i];\n\n      if (!promiseInput) {\n        // TODO: clean this up\n        promiseInput = needsPromiseInput(arg);\n        if (promiseInput === TRY_CATCH_ERROR) {\n          var error = TRY_CATCH_ERROR.error;\n          TRY_CATCH_ERROR.error = null;\n          var p = new Promise(noop);\n          reject(p, error);\n          return p;\n        } else if (promiseInput && promiseInput !== true) {\n          arg = wrapThenable(promiseInput, arg);\n        }\n      }\n      args[i] = arg;\n    }\n\n    var promise = new Promise(noop);\n\n    args[l] = function (err, val) {\n      if (err) {\n        reject(promise, err);\n      } else if (options === undefined) {\n        resolve(promise, val);\n      } else if (options === true) {\n        resolve(promise, arrayResult(arguments));\n      } else if (Array.isArray(options)) {\n        resolve(promise, makeObject(arguments, options));\n      } else {\n        resolve(promise, val);\n      }\n    };\n\n    if (promiseInput) {\n      return handlePromiseInput(promise, args, nodeFunc, this);\n    } else {\n      return handleValueInput(promise, args, nodeFunc, this);\n    }\n  };\n\n  fn.__proto__ = nodeFunc;\n\n  return fn;\n}\n\nfunction handleValueInput(promise, args, nodeFunc, self) {\n  var result = tryCatch(nodeFunc).apply(self, args);\n  if (result === TRY_CATCH_ERROR) {\n    var error = TRY_CATCH_ERROR.error;\n    TRY_CATCH_ERROR.error = null;\n    reject(promise, error);\n  }\n  return promise;\n}\n\nfunction handlePromiseInput(promise, args, nodeFunc, self) {\n  return Promise.all(args).then(function (args) {\n    return handleValueInput(promise, args, nodeFunc, self);\n  });\n}\n\nfunction needsPromiseInput(arg) {\n  if (arg !== null && typeof arg === 'object') {\n    if (arg.constructor === Promise) {\n      return true;\n    } else {\n      return getThen(arg);\n    }\n  } else {\n    return false;\n  }\n}\n\n/**\n  This is a convenient alias for `RSVP.Promise.all`.\n\n  @method all\n  @static\n  @for RSVP\n  @param {Array} array Array of promises.\n  @param {String} label An optional label. This is useful\n  for tooling.\n*/\nfunction all$1(array, label) {\n  return Promise.all(array, label);\n}\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar AllSettled = function (_Enumerator) {\n  _inherits(AllSettled, _Enumerator);\n\n  function AllSettled(Constructor, entries, label) {\n    return _possibleConstructorReturn(this, _Enumerator.call(this, Constructor, entries, false /* don't abort on reject */, label));\n  }\n\n  return AllSettled;\n}(Enumerator);\n\nAllSettled.prototype._setResultAt = setSettledResult;\n\n/**\n`RSVP.allSettled` is similar to `RSVP.all`, but instead of implementing\na fail-fast method, it waits until all the promises have returned and\nshows you all the results. This is useful if you want to handle multiple\npromises' failure states together as a set.\n Returns a promise that is fulfilled when all the given promises have been\nsettled. The return promise is fulfilled with an array of the states of\nthe promises passed into the `promises` array argument.\n Each state object will either indicate fulfillment or rejection, and\nprovide the corresponding value or reason. The states will take one of\nthe following formats:\n ```javascript\n{ state: 'fulfilled', value: value }\n  or\n{ state: 'rejected', reason: reason }\n```\n Example:\n ```javascript\nlet promise1 = RSVP.Promise.resolve(1);\nlet promise2 = RSVP.Promise.reject(new Error('2'));\nlet promise3 = RSVP.Promise.reject(new Error('3'));\nlet promises = [ promise1, promise2, promise3 ];\n RSVP.allSettled(promises).then(function(array){\n  // array == [\n  //   { state: 'fulfilled', value: 1 },\n  //   { state: 'rejected', reason: Error },\n  //   { state: 'rejected', reason: Error }\n  // ]\n  // Note that for the second item, reason.message will be '2', and for the\n  // third item, reason.message will be '3'.\n}, function(error) {\n  // Not run. (This block would only be called if allSettled had failed,\n  // for instance if passed an incorrect argument type.)\n});\n```\n @method allSettled\n@static\n@for RSVP\n@param {Array} entries\n@param {String} label - optional string that describes the promise.\nUseful for tooling.\n@return {Promise} promise that is fulfilled with an array of the settled\nstates of the constituent promises.\n*/\n\nfunction allSettled(entries, label) {\n  if (!Array.isArray(entries)) {\n    return Promise.reject(new TypeError(\"Promise.allSettled must be called with an array\"), label);\n  }\n\n  return new AllSettled(Promise, entries, label).promise;\n}\n\n/**\n  This is a convenient alias for `RSVP.Promise.race`.\n\n  @method race\n  @static\n  @for RSVP\n  @param {Array} array Array of promises.\n  @param {String} label An optional label. This is useful\n  for tooling.\n */\nfunction race$1(array, label) {\n  return Promise.race(array, label);\n}\n\nfunction _possibleConstructorReturn$1(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits$1(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\nvar PromiseHash = function (_Enumerator) {\n  _inherits$1(PromiseHash, _Enumerator);\n\n  function PromiseHash(Constructor, object) {\n    var abortOnReject = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    var label = arguments[3];\n    return _possibleConstructorReturn$1(this, _Enumerator.call(this, Constructor, object, abortOnReject, label));\n  }\n\n  PromiseHash.prototype._init = function _init(Constructor, object) {\n    this._result = {};\n\n    this._enumerate(object);\n    if (this._remaining === 0) {\n      fulfill(this.promise, this._result);\n    }\n  };\n\n  PromiseHash.prototype._enumerate = function _enumerate(input) {\n    var promise = this.promise;\n    var results = [];\n\n    for (var key in input) {\n      if (hasOwnProperty.call(input, key)) {\n        results.push({\n          position: key,\n          entry: input[key]\n        });\n      }\n    }\n\n    var length = results.length;\n    this._remaining = length;\n    var result = void 0;\n\n    for (var i = 0; promise._state === PENDING && i < length; i++) {\n      result = results[i];\n      this._eachEntry(result.entry, result.position);\n    }\n  };\n\n  return PromiseHash;\n}(Enumerator);\n\n/**\n  `RSVP.hash` is similar to `RSVP.all`, but takes an object instead of an array\n  for its `promises` argument.\n\n  Returns a promise that is fulfilled when all the given promises have been\n  fulfilled, or rejected if any of them become rejected. The returned promise\n  is fulfilled with a hash that has the same key names as the `promises` object\n  argument. If any of the values in the object are not promises, they will\n  simply be copied over to the fulfilled object.\n\n  Example:\n\n  ```javascript\n  let promises = {\n    myPromise: RSVP.resolve(1),\n    yourPromise: RSVP.resolve(2),\n    theirPromise: RSVP.resolve(3),\n    notAPromise: 4\n  };\n\n  RSVP.hash(promises).then(function(hash){\n    // hash here is an object that looks like:\n    // {\n    //   myPromise: 1,\n    //   yourPromise: 2,\n    //   theirPromise: 3,\n    //   notAPromise: 4\n    // }\n  });\n  ````\n\n  If any of the `promises` given to `RSVP.hash` are rejected, the first promise\n  that is rejected will be given as the reason to the rejection handler.\n\n  Example:\n\n  ```javascript\n  let promises = {\n    myPromise: RSVP.resolve(1),\n    rejectedPromise: RSVP.reject(new Error('rejectedPromise')),\n    anotherRejectedPromise: RSVP.reject(new Error('anotherRejectedPromise')),\n  };\n\n  RSVP.hash(promises).then(function(hash){\n    // Code here never runs because there are rejected promises!\n  }, function(reason) {\n    // reason.message === 'rejectedPromise'\n  });\n  ```\n\n  An important note: `RSVP.hash` is intended for plain JavaScript objects that\n  are just a set of keys and values. `RSVP.hash` will NOT preserve prototype\n  chains.\n\n  Example:\n\n  ```javascript\n  function MyConstructor(){\n    this.example = RSVP.resolve('Example');\n  }\n\n  MyConstructor.prototype = {\n    protoProperty: RSVP.resolve('Proto Property')\n  };\n\n  let myObject = new MyConstructor();\n\n  RSVP.hash(myObject).then(function(hash){\n    // protoProperty will not be present, instead you will just have an\n    // object that looks like:\n    // {\n    //   example: 'Example'\n    // }\n    //\n    // hash.hasOwnProperty('protoProperty'); // false\n    // 'undefined' === typeof hash.protoProperty\n  });\n  ```\n\n  @method hash\n  @static\n  @for RSVP\n  @param {Object} object\n  @param {String} label optional string that describes the promise.\n  Useful for tooling.\n  @return {Promise} promise that is fulfilled when all properties of `promises`\n  have been fulfilled, or rejected if any of them become rejected.\n*/\nfunction hash(object, label) {\n  if (object === null || typeof object !== 'object') {\n    return Promise.reject(new TypeError(\"Promise.hash must be called with an object\"), label);\n  }\n\n  return new PromiseHash(Promise, object, label).promise;\n}\n\nfunction _possibleConstructorReturn$2(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits$2(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar HashSettled = function (_PromiseHash) {\n  _inherits$2(HashSettled, _PromiseHash);\n\n  function HashSettled(Constructor, object, label) {\n    return _possibleConstructorReturn$2(this, _PromiseHash.call(this, Constructor, object, false, label));\n  }\n\n  return HashSettled;\n}(PromiseHash);\n\nHashSettled.prototype._setResultAt = setSettledResult;\n\n/**\n  `RSVP.hashSettled` is similar to `RSVP.allSettled`, but takes an object\n  instead of an array for its `promises` argument.\n\n  Unlike `RSVP.all` or `RSVP.hash`, which implement a fail-fast method,\n  but like `RSVP.allSettled`, `hashSettled` waits until all the\n  constituent promises have returned and then shows you all the results\n  with their states and values/reasons. This is useful if you want to\n  handle multiple promises' failure states together as a set.\n\n  Returns a promise that is fulfilled when all the given promises have been\n  settled, or rejected if the passed parameters are invalid.\n\n  The returned promise is fulfilled with a hash that has the same key names as\n  the `promises` object argument. If any of the values in the object are not\n  promises, they will be copied over to the fulfilled object and marked with state\n  'fulfilled'.\n\n  Example:\n\n  ```javascript\n  let promises = {\n    myPromise: RSVP.Promise.resolve(1),\n    yourPromise: RSVP.Promise.resolve(2),\n    theirPromise: RSVP.Promise.resolve(3),\n    notAPromise: 4\n  };\n\n  RSVP.hashSettled(promises).then(function(hash){\n    // hash here is an object that looks like:\n    // {\n    //   myPromise: { state: 'fulfilled', value: 1 },\n    //   yourPromise: { state: 'fulfilled', value: 2 },\n    //   theirPromise: { state: 'fulfilled', value: 3 },\n    //   notAPromise: { state: 'fulfilled', value: 4 }\n    // }\n  });\n  ```\n\n  If any of the `promises` given to `RSVP.hash` are rejected, the state will\n  be set to 'rejected' and the reason for rejection provided.\n\n  Example:\n\n  ```javascript\n  let promises = {\n    myPromise: RSVP.Promise.resolve(1),\n    rejectedPromise: RSVP.Promise.reject(new Error('rejection')),\n    anotherRejectedPromise: RSVP.Promise.reject(new Error('more rejection')),\n  };\n\n  RSVP.hashSettled(promises).then(function(hash){\n    // hash here is an object that looks like:\n    // {\n    //   myPromise:              { state: 'fulfilled', value: 1 },\n    //   rejectedPromise:        { state: 'rejected', reason: Error },\n    //   anotherRejectedPromise: { state: 'rejected', reason: Error },\n    // }\n    // Note that for rejectedPromise, reason.message == 'rejection',\n    // and for anotherRejectedPromise, reason.message == 'more rejection'.\n  });\n  ```\n\n  An important note: `RSVP.hashSettled` is intended for plain JavaScript objects that\n  are just a set of keys and values. `RSVP.hashSettled` will NOT preserve prototype\n  chains.\n\n  Example:\n\n  ```javascript\n  function MyConstructor(){\n    this.example = RSVP.Promise.resolve('Example');\n  }\n\n  MyConstructor.prototype = {\n    protoProperty: RSVP.Promise.resolve('Proto Property')\n  };\n\n  let myObject = new MyConstructor();\n\n  RSVP.hashSettled(myObject).then(function(hash){\n    // protoProperty will not be present, instead you will just have an\n    // object that looks like:\n    // {\n    //   example: { state: 'fulfilled', value: 'Example' }\n    // }\n    //\n    // hash.hasOwnProperty('protoProperty'); // false\n    // 'undefined' === typeof hash.protoProperty\n  });\n  ```\n\n  @method hashSettled\n  @for RSVP\n  @param {Object} object\n  @param {String} label optional string that describes the promise.\n  Useful for tooling.\n  @return {Promise} promise that is fulfilled when when all properties of `promises`\n  have been settled.\n  @static\n*/\n\nfunction hashSettled(object, label) {\n  if (object === null || typeof object !== 'object') {\n    return Promise.reject(new TypeError(\"RSVP.hashSettled must be called with an object\"), label);\n  }\n\n  return new HashSettled(Promise, object, false, label).promise;\n}\n\n/**\n  `RSVP.rethrow` will rethrow an error on the next turn of the JavaScript event\n  loop in order to aid debugging.\n\n  Promises A+ specifies that any exceptions that occur with a promise must be\n  caught by the promises implementation and bubbled to the last handler. For\n  this reason, it is recommended that you always specify a second rejection\n  handler function to `then`. However, `RSVP.rethrow` will throw the exception\n  outside of the promise, so it bubbles up to your console if in the browser,\n  or domain/cause uncaught exception in Node. `rethrow` will also throw the\n  error again so the error can be handled by the promise per the spec.\n\n  ```javascript\n  function throws(){\n    throw new Error('Whoops!');\n  }\n\n  let promise = new RSVP.Promise(function(resolve, reject){\n    throws();\n  });\n\n  promise.catch(RSVP.rethrow).then(function(){\n    // Code here doesn't run because the promise became rejected due to an\n    // error!\n  }, function (err){\n    // handle the error here\n  });\n  ```\n\n  The 'Whoops' error will be thrown on the next turn of the event loop\n  and you can watch for it in your console. You can also handle it using a\n  rejection handler given to `.then` or `.catch` on the returned promise.\n\n  @method rethrow\n  @static\n  @for RSVP\n  @param {Error} reason reason the promise became rejected.\n  @throws Error\n  @static\n*/\nfunction rethrow(reason) {\n  setTimeout(function () {\n    throw reason;\n  });\n  throw reason;\n}\n\n/**\n  `RSVP.defer` returns an object similar to jQuery's `$.Deferred`.\n  `RSVP.defer` should be used when porting over code reliant on `$.Deferred`'s\n  interface. New code should use the `RSVP.Promise` constructor instead.\n\n  The object returned from `RSVP.defer` is a plain object with three properties:\n\n  * promise - an `RSVP.Promise`.\n  * reject - a function that causes the `promise` property on this object to\n    become rejected\n  * resolve - a function that causes the `promise` property on this object to\n    become fulfilled.\n\n  Example:\n\n   ```javascript\n   let deferred = RSVP.defer();\n\n   deferred.resolve(\"Success!\");\n\n   deferred.promise.then(function(value){\n     // value here is \"Success!\"\n   });\n   ```\n\n  @method defer\n  @static\n  @for RSVP\n  @param {String} label optional string for labeling the promise.\n  Useful for tooling.\n  @return {Object}\n */\n\nfunction defer(label) {\n  var deferred = { resolve: undefined, reject: undefined };\n\n  deferred.promise = new Promise(function (resolve, reject) {\n    deferred.resolve = resolve;\n    deferred.reject = reject;\n  }, label);\n\n  return deferred;\n}\n\nfunction _possibleConstructorReturn$3(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits$3(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar MapEnumerator = function (_Enumerator) {\n  _inherits$3(MapEnumerator, _Enumerator);\n\n  function MapEnumerator(Constructor, entries, mapFn, label) {\n    return _possibleConstructorReturn$3(this, _Enumerator.call(this, Constructor, entries, true, label, mapFn));\n  }\n\n  MapEnumerator.prototype._init = function _init(Constructor, input, bool, label, mapFn) {\n    var len = input.length || 0;\n    this.length = len;\n    this._remaining = len;\n    this._result = new Array(len);\n    this._mapFn = mapFn;\n\n    this._enumerate(input);\n  };\n\n  MapEnumerator.prototype._setResultAt = function _setResultAt(state, i, value, firstPass) {\n    if (firstPass) {\n      var val = tryCatch(this._mapFn)(value, i);\n      if (val === TRY_CATCH_ERROR) {\n        this._settledAt(REJECTED, i, val.error, false);\n      } else {\n        this._eachEntry(val, i, false);\n      }\n    } else {\n      this._remaining--;\n      this._result[i] = value;\n    }\n  };\n\n  return MapEnumerator;\n}(Enumerator);\n\n/**\n `RSVP.map` is similar to JavaScript's native `map` method. `mapFn` is eagerly called\n  meaning that as soon as any promise resolves its value will be passed to `mapFn`.\n  `RSVP.map` returns a promise that will become fulfilled with the result of running\n  `mapFn` on the values the promises become fulfilled with.\n\n  For example:\n\n  ```javascript\n\n  let promise1 = RSVP.resolve(1);\n  let promise2 = RSVP.resolve(2);\n  let promise3 = RSVP.resolve(3);\n  let promises = [ promise1, promise2, promise3 ];\n\n  let mapFn = function(item){\n    return item + 1;\n  };\n\n  RSVP.map(promises, mapFn).then(function(result){\n    // result is [ 2, 3, 4 ]\n  });\n  ```\n\n  If any of the `promises` given to `RSVP.map` are rejected, the first promise\n  that is rejected will be given as an argument to the returned promise's\n  rejection handler. For example:\n\n  ```javascript\n  let promise1 = RSVP.resolve(1);\n  let promise2 = RSVP.reject(new Error('2'));\n  let promise3 = RSVP.reject(new Error('3'));\n  let promises = [ promise1, promise2, promise3 ];\n\n  let mapFn = function(item){\n    return item + 1;\n  };\n\n  RSVP.map(promises, mapFn).then(function(array){\n    // Code here never runs because there are rejected promises!\n  }, function(reason) {\n    // reason.message === '2'\n  });\n  ```\n\n  `RSVP.map` will also wait if a promise is returned from `mapFn`. For example,\n  say you want to get all comments from a set of blog posts, but you need\n  the blog posts first because they contain a url to those comments.\n\n  ```javscript\n\n  let mapFn = function(blogPost){\n    // getComments does some ajax and returns an RSVP.Promise that is fulfilled\n    // with some comments data\n    return getComments(blogPost.comments_url);\n  };\n\n  // getBlogPosts does some ajax and returns an RSVP.Promise that is fulfilled\n  // with some blog post data\n  RSVP.map(getBlogPosts(), mapFn).then(function(comments){\n    // comments is the result of asking the server for the comments\n    // of all blog posts returned from getBlogPosts()\n  });\n  ```\n\n  @method map\n  @static\n  @for RSVP\n  @param {Array} promises\n  @param {Function} mapFn function to be called on each fulfilled promise.\n  @param {String} label optional string for labeling the promise.\n  Useful for tooling.\n  @return {Promise} promise that is fulfilled with the result of calling\n  `mapFn` on each fulfilled promise or value when they become fulfilled.\n   The promise will be rejected if any of the given `promises` become rejected.\n  @static\n*/\n\n\nfunction map(promises, mapFn, label) {\n  if (!Array.isArray(promises)) {\n    return Promise.reject(new TypeError(\"RSVP.map must be called with an array\"), label);\n  }\n\n  if (typeof mapFn !== 'function') {\n    return Promise.reject(new TypeError(\"RSVP.map expects a function as a second argument\"), label);\n  }\n\n  return new MapEnumerator(Promise, promises, mapFn, label).promise;\n}\n\n/**\n  This is a convenient alias for `RSVP.Promise.resolve`.\n\n  @method resolve\n  @static\n  @for RSVP\n  @param {*} value value that the returned promise will be resolved with\n  @param {String} label optional string for identifying the returned promise.\n  Useful for tooling.\n  @return {Promise} a promise that will become fulfilled with the given\n  `value`\n*/\nfunction resolve$2(value, label) {\n  return Promise.resolve(value, label);\n}\n\n/**\n  This is a convenient alias for `RSVP.Promise.reject`.\n\n  @method reject\n  @static\n  @for RSVP\n  @param {*} reason value that the returned promise will be rejected with.\n  @param {String} label optional string for identifying the returned promise.\n  Useful for tooling.\n  @return {Promise} a promise rejected with the given `reason`.\n*/\nfunction reject$2(reason, label) {\n  return Promise.reject(reason, label);\n}\n\nfunction _possibleConstructorReturn$4(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits$4(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar EMPTY_OBJECT = {};\n\nvar FilterEnumerator = function (_Enumerator) {\n  _inherits$4(FilterEnumerator, _Enumerator);\n\n  function FilterEnumerator(Constructor, entries, filterFn, label) {\n    return _possibleConstructorReturn$4(this, _Enumerator.call(this, Constructor, entries, true, label, filterFn));\n  }\n\n  FilterEnumerator.prototype._init = function _init(Constructor, input, bool, label, filterFn) {\n    var len = input.length || 0;\n    this.length = len;\n    this._remaining = len;\n\n    this._result = new Array(len);\n    this._filterFn = filterFn;\n\n    this._enumerate(input);\n  };\n\n  FilterEnumerator.prototype._checkFullfillment = function _checkFullfillment() {\n    if (this._remaining === 0) {\n      this._result = this._result.filter(function (val) {\n        return val !== EMPTY_OBJECT;\n      });\n      fulfill(this.promise, this._result);\n    }\n  };\n\n  FilterEnumerator.prototype._setResultAt = function _setResultAt(state, i, value, firstPass) {\n    if (firstPass) {\n      this._result[i] = value;\n      var val = tryCatch(this._filterFn)(value, i);\n      if (val === TRY_CATCH_ERROR) {\n        this._settledAt(REJECTED, i, val.error, false);\n      } else {\n        this._eachEntry(val, i, false);\n      }\n    } else {\n      this._remaining--;\n      if (!value) {\n        this._result[i] = EMPTY_OBJECT;\n      }\n    }\n  };\n\n  return FilterEnumerator;\n}(Enumerator);\n\n/**\n `RSVP.filter` is similar to JavaScript's native `filter` method.\n `filterFn` is eagerly called meaning that as soon as any promise\n  resolves its value will be passed to `filterFn`. `RSVP.filter` returns\n  a promise that will become fulfilled with the result of running\n  `filterFn` on the values the promises become fulfilled with.\n\n  For example:\n\n  ```javascript\n\n  let promise1 = RSVP.resolve(1);\n  let promise2 = RSVP.resolve(2);\n  let promise3 = RSVP.resolve(3);\n\n  let promises = [promise1, promise2, promise3];\n\n  let filterFn = function(item){\n    return item > 1;\n  };\n\n  RSVP.filter(promises, filterFn).then(function(result){\n    // result is [ 2, 3 ]\n  });\n  ```\n\n  If any of the `promises` given to `RSVP.filter` are rejected, the first promise\n  that is rejected will be given as an argument to the returned promise's\n  rejection handler. For example:\n\n  ```javascript\n  let promise1 = RSVP.resolve(1);\n  let promise2 = RSVP.reject(new Error('2'));\n  let promise3 = RSVP.reject(new Error('3'));\n  let promises = [ promise1, promise2, promise3 ];\n\n  let filterFn = function(item){\n    return item > 1;\n  };\n\n  RSVP.filter(promises, filterFn).then(function(array){\n    // Code here never runs because there are rejected promises!\n  }, function(reason) {\n    // reason.message === '2'\n  });\n  ```\n\n  `RSVP.filter` will also wait for any promises returned from `filterFn`.\n  For instance, you may want to fetch a list of users then return a subset\n  of those users based on some asynchronous operation:\n\n  ```javascript\n\n  let alice = { name: 'alice' };\n  let bob   = { name: 'bob' };\n  let users = [ alice, bob ];\n\n  let promises = users.map(function(user){\n    return RSVP.resolve(user);\n  });\n\n  let filterFn = function(user){\n    // Here, Alice has permissions to create a blog post, but Bob does not.\n    return getPrivilegesForUser(user).then(function(privs){\n      return privs.can_create_blog_post === true;\n    });\n  };\n  RSVP.filter(promises, filterFn).then(function(users){\n    // true, because the server told us only Alice can create a blog post.\n    users.length === 1;\n    // false, because Alice is the only user present in `users`\n    users[0] === bob;\n  });\n  ```\n\n  @method filter\n  @static\n  @for RSVP\n  @param {Array} promises\n  @param {Function} filterFn - function to be called on each resolved value to\n  filter the final results.\n  @param {String} label optional string describing the promise. Useful for\n  tooling.\n  @return {Promise}\n*/\n\nfunction filter(promises, filterFn, label) {\n  if (typeof filterFn !== 'function') {\n    return Promise.reject(new TypeError(\"RSVP.filter expects function as a second argument\"), label);\n  }\n\n  return Promise.resolve(promises, label).then(function (promises) {\n    if (!Array.isArray(promises)) {\n      throw new TypeError(\"RSVP.filter must be called with an array\");\n    }\n    return new FilterEnumerator(Promise, promises, filterFn, label).promise;\n  });\n}\n\nvar len = 0;\nvar vertxNext = void 0;\nfunction asap(callback, arg) {\n  queue$1[len] = callback;\n  queue$1[len + 1] = arg;\n  len += 2;\n  if (len === 2) {\n    // If len is 1, that means that we need to schedule an async flush.\n    // If additional callbacks are queued before the queue is flushed, they\n    // will be processed by this flush that we are scheduling.\n    scheduleFlush$1();\n  }\n}\n\nvar browserWindow = typeof window !== 'undefined' ? window : undefined;\nvar browserGlobal = browserWindow || {};\nvar BrowserMutationObserver = browserGlobal.MutationObserver || browserGlobal.WebKitMutationObserver;\nvar isNode = typeof self === 'undefined' && typeof process !== 'undefined' && {}.toString.call(process) === '[object process]';\n\n// test for web worker but not in IE10\nvar isWorker = typeof Uint8ClampedArray !== 'undefined' && typeof importScripts !== 'undefined' && typeof MessageChannel !== 'undefined';\n\n// node\nfunction useNextTick() {\n  var nextTick = process.nextTick;\n  // node version 0.10.x displays a deprecation warning when nextTick is used recursively\n  // setImmediate should be used instead instead\n  var version = process.versions.node.match(/^(?:(\\d+)\\.)?(?:(\\d+)\\.)?(\\*|\\d+)$/);\n  if (Array.isArray(version) && version[1] === '0' && version[2] === '10') {\n    nextTick = setImmediate;\n  }\n  return function () {\n    return nextTick(flush);\n  };\n}\n\n// vertx\nfunction useVertxTimer() {\n  if (typeof vertxNext !== 'undefined') {\n    return function () {\n      vertxNext(flush);\n    };\n  }\n  return useSetTimeout();\n}\n\nfunction useMutationObserver() {\n  var iterations = 0;\n  var observer = new BrowserMutationObserver(flush);\n  var node = document.createTextNode('');\n  observer.observe(node, { characterData: true });\n\n  return function () {\n    return node.data = iterations = ++iterations % 2;\n  };\n}\n\n// web worker\nfunction useMessageChannel() {\n  var channel = new MessageChannel();\n  channel.port1.onmessage = flush;\n  return function () {\n    return channel.port2.postMessage(0);\n  };\n}\n\nfunction useSetTimeout() {\n  return function () {\n    return setTimeout(flush, 1);\n  };\n}\n\nvar queue$1 = new Array(1000);\n\nfunction flush() {\n  for (var i = 0; i < len; i += 2) {\n    var callback = queue$1[i];\n    var arg = queue$1[i + 1];\n\n    callback(arg);\n\n    queue$1[i] = undefined;\n    queue$1[i + 1] = undefined;\n  }\n\n  len = 0;\n}\n\nfunction attemptVertex() {\n  try {\n    var r = require;\n    var vertx = r('vertx');\n    vertxNext = vertx.runOnLoop || vertx.runOnContext;\n    return useVertxTimer();\n  } catch (e) {\n    return useSetTimeout();\n  }\n}\n\nvar scheduleFlush$1 = void 0;\n// Decide what async method to use to triggering processing of queued callbacks:\nif (isNode) {\n  scheduleFlush$1 = useNextTick();\n} else if (BrowserMutationObserver) {\n  scheduleFlush$1 = useMutationObserver();\n} else if (isWorker) {\n  scheduleFlush$1 = useMessageChannel();\n} else if (browserWindow === undefined && typeof require === 'function') {\n  scheduleFlush$1 = attemptVertex();\n} else {\n  scheduleFlush$1 = useSetTimeout();\n}\n\nvar _asap$Promise$EventTa;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// defaults\nconfig.async = asap;\nconfig.after = function (cb) {\n  return setTimeout(cb, 0);\n};\n\nvar async = function (callback, arg) {\n  return config.async(callback, arg);\n};\n\nfunction on() {\n  config['on'].apply(config, arguments);\n}\n\nfunction off() {\n  config['off'].apply(config, arguments);\n}\n\n// Set up instrumentation through `window.__PROMISE_INTRUMENTATION__`\nif (typeof window !== 'undefined' && typeof window['__PROMISE_INSTRUMENTATION__'] === 'object') {\n  var callbacks = window['__PROMISE_INSTRUMENTATION__'];\n  configure('instrument', true);\n  for (var eventName in callbacks) {\n    if (callbacks.hasOwnProperty(eventName)) {\n      on(eventName, callbacks[eventName]);\n    }\n  }\n}\n\n// the default export here is for backwards compat:\n//   https://github.com/tildeio/rsvp.js/issues/434\nvar rsvp = (_asap$Promise$EventTa = {\n  asap: asap,\n  Promise: Promise,\n  EventTarget: EventTarget,\n  all: all$1,\n  allSettled: allSettled,\n  race: race$1,\n  hash: hash,\n  hashSettled: hashSettled,\n  rethrow: rethrow,\n  defer: defer,\n  denodeify: denodeify,\n  configure: configure,\n  on: on,\n  off: off,\n  resolve: resolve$2,\n  reject: reject$2,\n  map: map\n}, _defineProperty(_asap$Promise$EventTa, 'async', async), _defineProperty(_asap$Promise$EventTa, 'filter', filter), _asap$Promise$EventTa);\n\nexport { asap, Promise, EventTarget, all$1 as all, allSettled, race$1 as race, hash, hashSettled, rethrow, defer, denodeify, configure, on, off, resolve$2 as resolve, reject$2 as reject, map, async, filter };\nexport default rsvp;\n\n//# sourceMappingURL=rsvp.es.map\n","import data from \"./chord-data\";\nimport { chroma } from \"../pcset\";\nimport { hash } from \"rsvp\";\n\n/**\n * A dictionary of musical chords.\n *\n * This is a low level module. Probably you should use Tonal.Chord that\n * includes this module and more functionallities.\n *\n * Each musical chord is represented by an object with:\n * - {string} - name: the main name\n * - {array<string>} - names: all known names (including the main name)\n * - {array<string>} - intervals\n * - {string} - chroma: the pitchclass set chroma\n * - {integer} - setnum: the pitchclass set chroma number in decimal\n *\n * ## Usage\n *\n * ```js\n * // ES6 modules (import)\n * import ChordDictionary from \"tonal/chord-dictionary\"\n *\n * ChordDictionary.all() // => [{ name: aeolian, .... }, ]\n * ChordDictionary.find(\"M\") // => {\n *   name: \"major\",\n *   quality: \"Major\",\n *   abbreviatures: [\"M\", \"\"],\n *   chroma: \"100010010000\",\n *   intervals: [\"1P\", \"3M\", \"5P\"],\n *   setnum: 2192\n * }\n * ```\n *\n * ## API\n *\n * @module ChordDictionary\n */\nexport default { all, find };\n\nlet cached;\n\nconst toChord = data => {\n  const intervals = data[0].split(\" \");\n  const name = data[1];\n  const abbreviatures = data[2].split(\" \");\n  const chord = { name, intervals, abbreviatures };\n\n  const has = interval => intervals.indexOf(interval) !== -1;\n  chord.quality = has(\"5A\")\n    ? \"Augmented\"\n    : has(\"3M\")\n    ? \"Major\"\n    : has(\"5d\")\n    ? \"Diminished\"\n    : has(\"3m\")\n    ? \"Minor\"\n    : null;\n  chord.chroma = chroma(intervals);\n  chord.setnum = parseInt(chord.chroma, 2);\n  return Object.freeze(chord);\n};\nconst byName = (a, b) => (a.name || \"\").localeCompare(b.name);\n\n/**\n * Return a list of all available chords\n *\n * @return {array<object>} array of chords\n */\nexport function all() {\n  return cached || (cached = data.map(toChord).sort(byName));\n}\n\nconst NO_SCALE = Object.freeze({ intervals: [], names: [] });\nconst isString = s => typeof s === \"string\";\n\n/**\n * Find a chord with the given query\n *\n * The query can include: name, intervals, chroma or setnum\n *\n * @param {*} props\n */\nexport function find(props) {\n  if (!props && props !== \"\") return NO_SCALE;\n\n  if (isString(props))\n    props = { name: props, abbreviature: props, chroma: props };\n  else if (Array.isArray(props)) props = { intervals: props };\n  else if (typeof props === \"number\") props = { setnum: props };\n\n  if (props.intervals) props.chroma = chroma(props.intervals);\n\n  const predicate = chord =>\n    (isString(props.name) && props.name === chord.name) ||\n    (isString(props.abbreviature) &&\n      chord.abbreviatures.indexOf(props.abbreviature) !== -1) ||\n    (props.chroma && props.chroma === chord.chroma) ||\n    (props.setnum && props.setnum === chord.setnum);\n  return all().find(predicate) || NO_SCALE;\n}\n","/**\n * `tonal/chord` is a collection of functions to manipulate musical chords\n *\n * ## Usage\n *\n * ```js\n * // ES6 modules (import)\n * import Chord from 'tonal/chord'\n * Chord.notes(\"CMaj7\") // => [\"C\", \"E\", \"G\", \"B\"]\n *\n * // Tonal facade (require)\n * const Tonal = require('tonal')\n * Tonal.Chord.intervals('Cmaj7') // => [\"1P\", \"3M\", \"5P\", \"7M\"]\n * ```\n *\n * ## API\n *\n * @module Chord\n */\nexport default {\n  tokenize,\n  transpose,\n  props,\n  notes,\n  intervals,\n  exists,\n  subsets,\n  supersets\n};\n\nimport { tokenize as split } from \"../note\";\nimport { transpose as tr } from \"../distance\";\nimport { all as chords, find as findChord } from \"../chord-dictionary\";\nimport { isSubsetOf, isSupersetOf } from \"../pcset\";\n\nconst chordName = chord => chord.abbreviatures[0];\n\n// 6, 64, 7, 9, 11 and 13 are consider part of the chord\n// (see https://github.com/danigb/tonal/issues/55)\nconst NUM_TYPES = /^(6|64|7|9|11|13)$/;\n/**\n * Tokenize a chord name. It returns an array with the tonic and chord type\n * If not tonic is found, all the name is considered the chord name.\n *\n * This function does NOT check if the chord type exists or not. It only tries\n * to split the tonic and chord type.\n *\n * @function\n * @param {string} name - the chord name\n * @return {Array} an array with [tonic, type]\n * @example\n * Chord.tokenize(\"Cmaj7\") // => [ \"C\", \"maj7\" ]\n * Chord.tokenize(\"C7\") // => [ \"C\", \"7\" ]\n * Chord.tokenize(\"mMaj7\") // => [ null, \"mMaj7\" ]\n * Chord.tokenize(\"Cnonsense\") // => [ null, \"nonsense\" ]\n */\nexport function tokenize(name) {\n  const p = split(name);\n  if (p[0] === \"\") return [null, name];\n  // aug is augmented (see https://github.com/danigb/tonal/issues/55)\n  if (p[0] === \"A\" && p[3] === \"ug\") return [null, \"aug\"];\n\n  if (NUM_TYPES.test(p[2])) {\n    return [p[0] + p[1], p[2] + p[3]];\n  } else {\n    return [p[0] + p[1] + p[2], p[3]];\n  }\n}\n\n/**\n * Transpose a chord name\n *\n * @param {string} name - the chord name\n * @return {string} the transposed chord\n *\n * @example\n * Chord.transpose('Dm7', 'P4') // => 'Gm7\n */\nexport function transpose(name, interval) {\n  const [tonic, type] = tokenize(name);\n  if (!tonic) return name;\n  return tr(tonic, interval) + type;\n}\n\n/**\n * Return the available chord names\n *\n * @function\n * @param {boolean} aliases - true to include aliases\n * @return {Array} the chord names\n *\n * @example\n * Chord.names() // => [\"maj7\", ...]\n */\nexport const names = aliases => chords.map(chordName);\n\n/**\n * Get chord properties. It returns an object with:\n *\n * - name: the chord name\n * - names: a list with all possible names (includes the current)\n * - intervals: an array with the chord intervals\n * - chroma:  chord croma (see pcset)\n * - setnum: chord chroma number\n *\n * @function\n * @param {string} name - the chord name (without tonic)\n * @return {Object} an object with the properties or a object with all properties\n * set to null if not valid chord name\n */\nexport function props(chordName) {\n  const [tonic, type] = tokenize(chordName);\n  const chord = findChord(type);\n  const props = {\n    tonic,\n    notes: tonic ? chord.intervals.map(tr(tonic)) : []\n  };\n  return Object.assign(props, chord);\n}\n\n/**\n * Get chord intervals. It always returns an array\n *\n * @function\n * @param {string} name - the chord name (optionally a tonic and type)\n * @return {Array<String>} a list of intervals or null if the type is not known\n */\nexport function intervals(name) {\n  return props(name).intervals;\n}\n\n/**\n * Get the chord notes of a chord. This function accepts either a chord name\n * (for example: \"Cmaj7\") or a list of notes.\n *\n * It always returns an array, even if the chord is not found.\n *\n * @function\n * @param {string} nameOrTonic - name of the chord or the tonic (if the second parameter is present)\n * @param {string} [name] - (Optional) name if the first parameter is the tonic\n * @return {Array} an array of notes or an empty array\n *\n * @example\n * Chord.notes(\"Cmaj7\") // => [\"C\", \"E\", \"G\", \"B\"]\n * Chord.notes(\"C\", \"maj7\") // => [\"C\", \"E\", \"G\", \"B\"]\n */\nexport function notes(nameOrTonic, type) {\n  if (type) return props(type).intervals.map(tr(nameOrTonic));\n  return props(nameOrTonic).notes;\n}\n\n/**\n * Check if a given name correspond to a chord in the dictionary\n *\n * @function\n * @param {string} name\n * @return {Boolean}\n *\n * @example\n * Chord.exists(\"CMaj7\") // => true\n * Chord.exists(\"Maj7\") // => true\n * Chord.exists(\"Ablah\") // => false\n */\nexport function exists(name) {\n  return props(name).intervals.length > 0;\n}\n\n/**\n * Get all chords names that are a superset of the given one\n * (has the same notes and at least one more)\n *\n * @function\n * @param {string} name\n * @return {Array} a list of chord names\n */\nexport function supersets(name) {\n  const chordIntervals = intervals(name);\n  if (chordIntervals.length === 0) return [];\n  const isSuperset = isSupersetOf(chordIntervals);\n  return chords()\n    .filter(chord => isSuperset(chord.intervals))\n    .map(chordName);\n}\n\n/**\n * Find all chords names that are a subset of the given one\n * (has less notes but all from the given chord)\n *\n * @function\n * @param {string} name\n * @return {Array} a list of chord names\n */\nexport function subsets(name) {\n  const isSubset = isSubsetOf(intervals(name));\n  return chords()\n    .filter(chord => isSubset(chord.intervals))\n    .map(chordName);\n}\n","/**\n * [![npm version](https://img.shields.io/npm/v/tonal-roman-numeral.svg?style=flat-square)](https://www.npmjs.com/package/tonal-roman-numeral)\n * [![tonal](https://img.shields.io/badge/tonal-roman-numeral-yellow.svg?style=flat-square)](https://www.npmjs.com/browse/keyword/tonal)\n *\n * `tonal-roman-numeral` is a collection of functions to query about tonal keys.\n *\n * This is part of [tonal](https://www.npmjs.com/package/tonal) music theory library.\n *\n * @example\n * // es6\n * import * as RomanNumeral from \"tonal-roman-numeral\"\n * // es5\n * const RomanNumeral = require(\"tonal-roman-numeral\")\n *\n * @example\n * RomanNumeral.names() // => [\"I\", \"II\", \"III\", \"IV\", \"V\", \"VI\", \"VII\"]\n * RomanNumeral.props('ii7') // => { name: 'ii', type: '7', num: 2, major: false }\n * RomanNumeral.degree(2) // => \"II\"\n * RomanNumeral.degree(2, false) // => \"ii\"\n * @module RomanNumeral\n */\nexport default { name, names, props, decimal, type, name, fromDegree };\n\nconst NAMES = \"I II III IV V VI VII\".split(\" \");\nconst NAMES_MINOR = NAMES.map(n => n.toLowerCase());\nconst REGEX = /^(IV|I{1,3}|VI{0,2}|iv|i{1,3}|vi{0,2})([^IViv]*)$/;\nconst NO_PROPS = { name: null, type: null };\n\nconst getNames = major => (major === false ? NAMES_MINOR : NAMES);\n\nconst properties = str => {\n  const m = REGEX.exec(str);\n  if (!m) return NO_PROPS;\n  const name = m[1];\n  const type = m[2];\n  const n = name.toUpperCase();\n  const major = name === n;\n  const decimal = NAMES.indexOf(n) + 1;\n  return { name, type, decimal, major };\n};\n\nconst cache = {};\n/**\n * Get properties of a roman numeral string\n *\n * @function\n * @param {string} - the roman numeral string (can have type, like: Imaj7)\n * @return {Object} - the roman numeral properties\n *\n * @example\n * props(\"VIIb5\") // => { name: \"VII\", type: \"b5\", num: 7, major: true }\n */\nexport function props(str) {\n  return cache[str] || (cache[str] = properties(str));\n}\n\n/**\n * Get roman numeral names\n *\n * @function\n * @param {boolean} [isMajor=true]\n * @return {Array<String>}\n *\n * @example\n * names() // => [\"I\", \"II\", \"III\", \"IV\", \"V\", \"VI\", \"VII\"]\n * names(false) // => [\"i\", \"ii\", \"iii\", \"iv\", \"v\", \"vi\", \"vii\"]\n */\nexport function names(isMajor) {\n  return getNames(isMajor).slice();\n}\n\n/**\n * Get roman numeral name of a string or null if not valid roman numeral\n *\n * @function\n * @param {string} name\n * @return {string}\n *\n * @example\n * name('IIb7') // => 'II\n * name('iii') // => 'iii'\n * name('Ii') // => null (mixed case not allowed)\n */\nexport function name(str) {\n  return props(str).name;\n}\n\n/**\n * Get type of a roman numeral\n *\n * @function\n * @param {string} name\n * @return {string}\n *\n * @example\n * type('Imaj7') // => 'maj7'\n */\nexport function type(str) {\n  return props(str).type;\n}\n\n/**\n * Get roman numeral number in decimal integer (it accepts numbers from 1 to 7)\n *\n *\n * @function\n * @param {string|number} name - roman numeral name (with optional type)\n * @return {number}\n *\n * @example\n * decimal('IVmaj7') // => 4\n * decimal(4) // => 4\n * decimal(10) // => null\n */\nexport function decimal(val) {\n  return val > 0 && val < 8 ? val : props(val).decimal || null;\n}\n\n/**\n * Get a roman numeral from a degree number\n *\n * @function\n * @param {number} degree\n * @param {boolean} [isMajor=true]\n * @return {string} the roman numeral\n *\n * @example\n * fromDegree(2) // => \"II\"\n * fromDegree(2, false) // => \"ii\"\n */\nexport function fromDegree(degree, isMajor) {\n  return getNames(isMajor)[degree - 1] || null;\n}\n","import { rotate, range } from \"../array\";\nimport { tokenize as split, altToAcc } from \"../note\";\nimport { trFifths, fifths, interval, transpose } from \"../distance\";\nimport { fromDegree, decimal } from \"../roman-numeral\";\n\n/**\n * [![npm version](https://img.shields.io/npm/v/tonal-key.svg?style=flat-square)](https://www.npmjs.com/package/tonal-key)\n * [![tonal](https://img.shields.io/badge/tonal-key-yellow.svg?style=flat-square)](https://www.npmjs.com/browse/keyword/tonal)\n *\n * `tonal-key` is a collection of functions to query about tonal keys.\n *\n * This is part of [tonal](https://www.npmjs.com/package/tonal) music theory library.\n *\n * @example\n * // es6\n * import * as Key from \"tonal-key\"\n * // es5\n * const Key = require(\"tonal-key\")\n *\n * @example\n * Key.scale(\"E mixolydian\") // => [ \"E\", \"F#\", \"G#\", \"A\", \"B\", \"C#\", \"D\" ]\n * Key.relative(\"minor\", \"C major\") // => \"A minor\"\n *\n * @module Key\n */\n\nconst MODES = \"major dorian phrygian lydian mixolydian minor locrian ionian aeolian\".split(\n  \" \"\n);\nconst NUMS = [0, 1, 2, 3, 4, 5, 6, 0, 5];\nconst NOTES = \"C D E F G A B\".split(\" \");\n\nconst TRIADS = [\"\", \"m\", \"m\", \"\", \"\", \"m\", \"dim\"];\nconst SEVENTHS = \"Maj7 m7 m7 Maj7 7 m7 m7b5\".split(\" \");\nconst FIFTHS = [0, 2, 4, -1, 1, 3, 5, 0, 3];\n\nconst modenum = mode => NUMS[MODES.indexOf(mode)];\n\n/**\n * Get a list of valid mode names. The list of modes will be always in\n * increasing order (ionian to locrian)\n *\n * @function\n * @param {Boolean} alias - true to get aliases names\n * @return {Array} an array of strings\n * @example\n * Key.modes() // => [ \"ionian\", \"dorian\", \"phrygian\", \"lydian\",\n * // \"mixolydian\", \"aeolian\", \"locrian\" ]\n * Key.modes(true) // => [ \"ionian\", \"dorian\", \"phrygian\", \"lydian\",\n * // \"mixolydian\", \"aeolian\", \"locrian\", \"major\", \"minor\" ]\n */\nexport function modeNames(aliases) {\n  return aliases === true ? MODES.slice() : MODES.slice(0, 7);\n}\n\n/**\n * Create a major key from alterations\n *\n * @function\n * @param {Integer} alt - the alteration number (positive sharps, negative flats)\n * @return {Key} the key object\n * @example\n * Key.fromAlter(2) // => \"D major\"\n */\nexport function fromAlter(i) {\n  return trFifths(\"C\", i) + \" major\";\n}\n\nexport function names(alt = 4) {\n  alt = Math.abs(alt);\n  const result = [];\n  for (let i = -alt; i <= alt; i++) result.push(fromAlter(i));\n  return result;\n}\n\nconst NO_KEY = Object.freeze({\n  name: null,\n  tonic: null,\n  mode: null,\n  modenum: null,\n  intervals: [],\n  scale: [],\n  alt: null,\n  acc: null\n});\n\nconst properties = name => {\n  const p = tokenize(name);\n  if (p[0] === null) return NO_KEY;\n  const k = { tonic: p[0], mode: p[1] };\n  k.name = k.tonic + \" \" + k.mode;\n  k.modenum = modenum(k.mode);\n  const cs = rotate(k.modenum, NOTES);\n  k.alt = fifths(\"C\", k.tonic) - FIFTHS[MODES.indexOf(k.mode)];\n  k.acc = altToAcc(k.alt);\n  k.intervals = cs.map(interval(cs[0]));\n  k.scale = k.intervals.map(transpose(k.tonic));\n  return Object.freeze(k);\n};\n\nconst memo = (fn, cache = {}) => str => cache[str] || (cache[str] = fn(str));\n\n/**\n * Return the a key properties object with the following information:\n *\n * - name {string}: name\n * - tonic {string}: key tonic\n * - mode {string}: key mode\n * - modenum {number}: mode number (0 major, 1 dorian, ...)\n * - intervals {Array}: the scale intervals\n * - scale {Array}: the scale notes\n * - acc {string}: accidentals of the key signature\n * - alt {number}: alteration number (a numeric representation of accidentals)\n *\n * @function\n * @param {string} name - the key name\n * @return {Object} the key properties object or null if not a valid key\n *\n * @example\n * Key.props(\"C3 dorian\") // => { tonic: \"C\", mode: \"dorian\", ... }\n */\nexport const props = memo(properties);\n\n/**\n * Get scale of a key\n *\n * @function\n * @param {string|Object} key\n * @return {Array} the key scale\n *\n * @example\n * Key.scale(\"A major\") // => [ \"A\", \"B\", \"C#\", \"D\", \"E\", \"F#\", \"G#\" ]\n * Key.scale(\"Bb minor\") // => [ \"Bb\", \"C\", \"Db\", \"Eb\", \"F\", \"Gb\", \"Ab\" ]\n * Key.scale(\"C dorian\") // => [ \"C\", \"D\", \"Eb\", \"F\", \"G\", \"A\", \"Bb\" ]\n * Key.scale(\"E mixolydian\") // => [ \"E\", \"F#\", \"G#\", \"A\", \"B\", \"C#\", \"D\" ]\n */\nexport const scale = str => props(str).scale;\n\n/**\n * Get a list of key scale degrees in roman numerals\n * @param {string} keyName\n * @return {Array}\n * @example\n * Key.degrees(\"C major\") => [\"I\", \"ii\", \"iii\", \"IV\", \"V\", \"vi\", \"vii\"]\n */\nexport function degrees(str) {\n  const p = props(str);\n  if (p.name === null) return [];\n  const chords = rotate(p.modenum, SEVENTHS);\n  return chords.map((chord, i) => {\n    return fromDegree(i + 1, chord[0] !== \"m\");\n  });\n}\n\n/**\n * Get a list of the altered notes of a given Key. The notes will be in\n * the same order than in the key signature.\n *\n * @function\n * @param {string} key - the key name\n * @return {Array}\n *\n * @example\n * Key.alteredNotes(\"Eb major\") // => [ \"Bb\", \"Eb\", \"Ab\" ]\n */\nexport function alteredNotes(name) {\n  const alt = props(name).alt;\n  if (alt === null) return null;\n  return alt === 0\n    ? []\n    : alt > 0\n    ? range(1, alt).map(trFifths(\"B\"))\n    : range(-1, alt).map(trFifths(\"F\"));\n}\n\n/**\n * Get a lead-sheet symbols for a given key name\n *\n * This function is currified (so can be partially applied)\n *\n * From http://openmusictheory.com/triads.html\n *\n * A lead-sheet symbol begins with a capital letter (and, if necessary,\n * an accidental) denoting the root of the chord.\n * That letter is followed by information about a chord’s quality:\n *\n * - major triad: no quality symbol is added\n * - minor triad: lower-case “m”\n * - diminished triad: lower-case “dim” or a degree sign “°”\n * - augmented triad: lower-case “aug” or a plus sign “+”\n *\n * @param {Array<string>} symbols - an array of symbols in major scale order\n * @param {string} keyName - the name of the key you want the symbols for\n * @param {Array<string>} [degrees] - the list of degrees. By default from 1 to 7 in ascending order\n * @return {function}\n * @see Key.chords\n * @see Key.triads\n *\n * @example\n * const chords = Key.leadsheetSymbols([\"M\", \"m\", \"m\", \"M\", \"7\", \"m\", \"dim\"])\n * chords(\"D dorian\") //=> [\"Dm\", \"Em\", \"FM\", \"G7\", \"Am\", \"Bdim\", \"CM\"]\n * chords(\"D dorian\", ['ii', 'V']) //=> [Em\", \"G7\"]\n */\nexport function leadsheetSymbols(symbols, keyName, degrees) {\n  if (arguments.length === 1) return (n, d) => leadsheetSymbols(symbols, n, d);\n  const p = props(keyName);\n  if (!p.name) return [];\n  const names = rotate(p.modenum, symbols);\n  const chords = p.scale.map((tonic, i) => tonic + names[i]);\n  if (!degrees) return chords;\n  return degrees.map(decimal).map(n => chords[n - 1]);\n}\n\n/**\n * Get key seventh chords\n *\n * @function\n * @param {string} name - the key name\n * @param {Array<number|string>} [degrees] - can be numbers or roman numerals\n * @return {Array<string>} seventh chord names\n *\n * @example\n * Key.chords(\"A major\") // => [\"AMaj7\", \"Bm7\", \"C#m7\", \"DMaj7\", ..,]\n * Key.chords(\"A major\", ['I', 'IV', 'V']) // => [\"AMaj7\", \"DMaj7\", \"E7\"]\n * Key.chords(\"A major\", [5, 4, 1]) // => [\"E7\", \"DMaj7\", AMaj7\"]\n */\nexport const chords = leadsheetSymbols(SEVENTHS);\n\n/**\n * Get key triads\n *\n * @function\n * @param {string} name - the key name\n * @param {Array<string|number>} [degrees]\n * @return {Array<string>} triad names\n *\n * @example\n * Key.triads(\"A major\") // => [\"AM\", \"Bm\", \"C#m\", \"DM\", \"E7\", \"F#m\", \"G#mb5\"]\n * Key.triads(\"A major\", ['I', 'IV', 'V']) // => [\"AMaj7\", \"DMaj7\", \"E7\"]\n * Key.triads(\"A major\", [1, 4, 5]) // => [\"AMaj7\", \"DMaj7\", \"E7\"]\n */\nexport const triads = leadsheetSymbols(TRIADS);\n\n/**\n * Get secondary dominant key chords\n *\n * @function\n * @param {string} name - the key name\n * @return {Array}\n *\n * @example\n * Key.secDomChords(\"A major\") // => [\"E7\", \"F#7\", ...]\n */\n\nexport const secDomChords = name => {\n  const p = props(name);\n  if (!p.name) return [];\n  return p.scale.map(t => transpose(t, \"P5\") + \"7\");\n};\n\n/**\n * Get relative of a key. Two keys are relative when the have the same\n * key signature (for example C major and A minor)\n *\n * It can be partially applied.\n *\n * @function\n * @param {string} mode - the relative destination\n * @param {string} key - the key source\n *\n * @example\n * Key.relative(\"dorian\", \"B major\") // => \"C# dorian\"\n * // partial application\n * var minor = Key.relative(\"minor\")\n * minor(\"C major\") // => \"A minor\"\n * minor(\"E major\") // => \"C# minor\"\n */\nexport function relative(mode, key) {\n  if (arguments.length === 1) return key => relative(mode, key);\n  const num = modenum(mode.toLowerCase());\n  if (num === undefined) return null;\n  const k = props(key);\n  if (k.name === null) return null;\n  return trFifths(k.tonic, FIFTHS[num] - FIFTHS[k.modenum]) + \" \" + mode;\n}\n\n/**\n * Split the key name into its components (pitch class tonic and mode name)\n *\n * @function\n * @param {string} name\n * @return {Array} an array in the form [tonic, key]\n *\n * @example\n * Key.tokenize(\"C major\") // => [\"C\", \"major\"]\n */\nexport function tokenize(name) {\n  const p = split(name);\n  p[3] = p[3].toLowerCase();\n  if (p[0] === \"\" || MODES.indexOf(p[3]) === -1) return [null, null];\n  return [p[0] + p[1], p[3]];\n}\n\nexport default {\n  tokenize,\n  modeNames,\n  fromAlter,\n  names,\n  props,\n  scale,\n  degrees,\n  relative,\n  alteredNotes,\n  leadsheetSymbols,\n  chords,\n  triads,\n  secDomChords\n};\n","import data from \"./scale-data\";\nimport { chroma } from \"../pcset\";\n\n/**\n * A dictionary of musical scales.\n *\n * This is a low level module. Probably you should use Tonal.Scale that\n * includes this module and more functionallities.\n *\n * Each musical scale is represented by an object with:\n * - {string} - name: the main name\n * - {array<string>} - names: all known names (including the main name)\n * - {array<string>} - intervals\n * - {string} - chroma: the pitchclass set chroma\n * - {integer} - setnum: the pitchclass set chroma number in decimal\n *\n * @example\n * import ScaleDictionary from \"tonal/scale-dictionary\"\n *\n * ScaleDictionary.all() // => [{ name: aeolian, .... }, ]\n * ScaleDictionary.find(\"major\") // => {\n *   name: 'major',\n *   intervals: [ '1P', '2M', '3M', '4P', '5P', '6M', '7M' ],\n *   names: [ 'major', 'ionian' ],\n *   chroma: '101011010101',\n *   setnum: 2773\n * }\n *\n * @example\n * // CommonJS modules (require, node.js)\n * const { ScaleDictionary } = require(\"tonal\")\n *\n * @module ScaleDictionary\n */\nexport default { all, find };\n\nlet cached;\n\nconst toScale = data => {\n  const intervals = data[0].split(\" \");\n  const name = data[1];\n  const names = data.slice(1);\n  const scale = { name, intervals, names };\n  scale.chroma = chroma(intervals);\n  scale.setnum = parseInt(scale.chroma, 2);\n  return Object.freeze(scale);\n};\nconst byName = (a, b) => a.name.localeCompare(b.name);\n\n/**\n * Return a list of all available scales\n *\n * @return {array<object>} array of scales\n */\nexport function all() {\n  return cached || (cached = data.map(toScale).sort(byName));\n}\n\nconst NO_SCALE = Object.freeze({ intervals: [], names: [] });\n\n/**\n * Find a scale with the given query\n *\n * The query can include: name, intervals, chroma or setnum\n *\n * @param {*} props\n */\nexport function find(props) {\n  if (typeof props === \"string\") props = { name: props, chroma: props };\n  else if (Array.isArray(props)) props = { intervals: props };\n  else if (typeof props === \"number\") props = { setnum: props };\n  if (props.intervals) props.chroma = chroma(props.intervals);\n\n  const predicate = scale =>\n    (props.name && scale.names.indexOf(props.name) !== -1) ||\n    (props.chroma && props.chroma === scale.chroma) ||\n    (props.setnum && props.setnum === scale.setnum);\n  return all().find(predicate) || NO_SCALE;\n}\n","// SCALES\n// Format: [\"intervals\", \"name\", \"alias1\", \"alias2\", ...]\nexport default [\n  // 5-note scales\n  [\"1P 2M 3M 5P 6M\", \"major pentatonic\", \"pentatonic\"],\n  [\"1P 3M 4P 5P 7M\", \"ionian pentatonic\"],\n  [\"1P 3M 4P 5P 7m\", \"mixolydian pentatonic\", \"indian\"],\n  [\"1P 2M 4P 5P 6M\", \"ritusen\"],\n  [\"1P 2M 4P 5P 7m\", \"egyptian\"],\n  [\"1P 3M 4P 5d 7m\", \"neopolitan major pentatonic\"],\n  [\"1P 3m 4P 5P 6m\", \"vietnamese 1\"],\n  [\"1P 2m 3m 5P 6m\", \"pelog\"],\n  [\"1P 2m 4P 5P 6m\", \"kumoijoshi\"],\n  [\"1P 2M 3m 5P 6m\", \"hirajoshi\"],\n  [\"1P 2m 4P 5d 7m\", \"iwato\"],\n  [\"1P 2m 4P 5P 7m\", \"in-sen\"],\n  [\"1P 3M 4A 5P 7M\", \"lydian pentatonic\", \"chinese\"],\n  [\"1P 3m 4P 6m 7m\", \"malkos raga\"],\n  [\"1P 3m 4P 5d 7m\", \"locrian pentatonic\", \"minor seven flat five pentatonic\"],\n  [\"1P 3m 4P 5P 7m\", \"minor pentatonic\", \"vietnamese 2\"],\n  [\"1P 3m 4P 5P 6M\", \"minor six pentatonic\"],\n  [\"1P 2M 3m 5P 6M\", \"flat three pentatonic\", \"kumoi\"],\n  [\"1P 2M 3M 5P 6m\", \"flat six pentatonic\"],\n  [\"1P 2m 3M 5P 6M\", \"scriabin\"],\n  [\"1P 3M 5d 6m 7m\", \"whole tone pentatonic\"],\n  [\"1P 3M 4A 5A 7M\", \"lydian #5P pentatonic\"],\n  [\"1P 3M 4A 5P 7m\", \"lydian dominant pentatonic\"],\n  [\"1P 3m 4P 5P 7M\", \"minor #7M pentatonic\"],\n  [\"1P 3m 4d 5d 7m\", \"super locrian pentatonic\"],\n\n  // 6-note scales\n  [\"1P 2M 3m 4P 5P 7M\", \"minor hexatonic\"],\n  [\"1P 2A 3M 5P 5A 7M\", \"augmented\"],\n  [\"1P 3m 4P 5d 5P 7m\", \"minor blues\", \"blues\"],\n  [\"1P 2M 3m 3M 5P 6M\", \"major blues\"],\n  [\"1P 2M 4P 5P 6M 7m\", \"piongio\"],\n  [\"1P 2m 3M 4A 6M 7m\", \"prometheus neopolitan\"],\n  [\"1P 2M 3M 4A 6M 7m\", \"prometheus\"],\n  [\"1P 2m 3M 5d 6m 7m\", \"mystery #1\"],\n  [\"1P 2m 3M 4P 5A 6M\", \"six tone symmetric\"],\n  [\"1P 2M 3M 4A 5A 7m\", \"whole tone\"],\n\n  // 7-note scales\n  [\"1P 2M 3M 4P 5d 6m 7m\", \"locrian major\", \"arabian\"],\n  [\"1P 2m 3M 4A 5P 6m 7M\", \"double harmonic lydian\"],\n  [\"1P 2M 3m 4P 5P 6m 7M\", \"harmonic minor\"],\n  [\n    \"1P 2m 3m 3M 5d 6m 7m\",\n    \"altered\",\n    \"super locrian\",\n    \"diminished whole tone\",\n    \"pomeroy\"\n  ],\n  [\"1P 2M 3m 4P 5d 6m 7m\", \"locrian #2\", \"half-diminished\"],\n  [\n    \"1P 2M 3M 4P 5P 6m 7m\",\n    \"melodic minor fifth mode\",\n    \"hindu\",\n    \"mixolydian b6M\"\n  ],\n  [\"1P 2M 3M 4A 5P 6M 7m\", \"lydian dominant\", \"lydian b7\"],\n  [\"1P 2M 3M 4A 5P 6M 7M\", \"lydian\"],\n  [\"1P 2M 3M 4A 5A 6M 7M\", \"lydian augmented\"],\n  [\"1P 2m 3m 4P 5P 6M 7m\", \"melodic minor second mode\"],\n  [\"1P 2M 3m 4P 5P 6M 7M\", \"melodic minor\"],\n  [\"1P 2m 3m 4P 5d 6m 7m\", \"locrian\"],\n  [\"1P 2A 3M 4P 5P 5A 7M\", \"augmented heptatonic\"],\n  [\"1P 2M 3m 4A 5P 6M 7m\", \"dorian #4\"],\n  [\"1P 2M 3m 4A 5P 6M 7M\", \"lydian diminished\"],\n  [\"1P 2m 3m 4P 5P 6m 7m\", \"phrygian\"],\n  [\"1P 2M 3M 4A 5A 7m 7M\", \"leading whole tone\"],\n  [\"1P 2M 3M 4A 5P 6m 7m\", \"lydian minor\"],\n  [\"1P 2m 3M 4P 5P 6m 7m\", \"phrygian dominant\", \"spanish\", \"phrygian major\"],\n  [\"1P 2m 3m 4P 5P 6m 7M\", \"balinese\"],\n  [\"1P 2m 3m 4P 5P 6M 7M\", \"neopolitan major\", \"dorian b2\"],\n  [\"1P 2M 3m 4P 5P 6m 7m\", \"aeolian\", \"minor\"],\n  [\"1P 2M 3m 5d 5P 6M 7m\", \"romanian minor\"],\n  [\"1P 2M 3M 4P 5P 6m 7M\", \"harmonic major\"],\n  [\"1P 2m 3M 4P 5P 6m 7M\", \"double harmonic major\", \"gypsy\"],\n  [\"1P 2M 3m 4P 5P 6M 7m\", \"dorian\"],\n  [\"1P 2M 3m 4A 5P 6m 7M\", \"hungarian minor\"],\n  [\"1P 2A 3M 4A 5P 6M 7m\", \"hungarian major\"],\n  [\"1P 2m 3M 4P 5d 6M 7m\", \"oriental\"],\n  [\"1P 2m 3m 3M 4A 5P 7m\", \"flamenco\"],\n  [\"1P 2m 3m 4A 5P 6m 7M\", \"todi raga\"],\n  [\"1P 2M 3M 4P 5P 6M 7m\", \"mixolydian\", \"dominant\"],\n  [\"1P 2m 3M 4P 5d 6m 7M\", \"persian\"],\n  [\"1P 2M 3M 4P 5P 6M 7M\", \"major\", \"ionian\"],\n  [\"1P 2m 3M 5d 6m 7m 7M\", \"enigmatic\"],\n  [\"1P 2M 3M 4P 5A 6M 7M\", \"ionian augmented\"],\n  [\"1P 2m 3M 4A 5P 6M 7M\", \"lydian #9\"],\n\n  // 8-note scales\n  [\"1P 2m 3M 4P 4A 5P 6m 7M\", \"purvi raga\"],\n  [\"1P 2m 3m 3M 4P 5P 6m 7m\", \"spanish heptatonic\"],\n  [\"1P 2M 3M 4P 5P 6M 7m 7M\", \"bebop\"],\n  [\"1P 2M 3m 3M 4P 5P 6M 7m\", \"bebop minor\"],\n  [\"1P 2M 3M 4P 5P 5A 6M 7M\", \"bebop major\"],\n  [\"1P 2m 3m 4P 5d 5P 6m 7m\", \"bebop locrian\"],\n  [\"1P 2M 3m 4P 5P 6m 7m 7M\", \"minor bebop\"],\n  [\"1P 2M 3m 4P 5d 6m 6M 7M\", \"diminished\", \"whole-half diminished\"],\n  [\"1P 2M 3M 4P 5d 5P 6M 7M\", \"ichikosucho\"],\n  [\"1P 2M 3m 4P 5P 6m 6M 7M\", \"minor six diminished\"],\n  [\"1P 2m 3m 3M 4A 5P 6M 7m\", \"half-whole diminished\", \"dominant diminished\"],\n  [\"1P 3m 3M 4P 5P 6M 7m 7M\", \"kafi raga\"],\n\n  // 9-note scales\n  [\"1P 2M 3m 3M 4P 5d 5P 6M 7m\", \"composite blues\"],\n\n  // 12-note scales\n  [\"1P 2m 2M 3m 3M 4P 4A 5P 6m 6M 7m 7M\", \"chromatic\"]\n];\n","import { name as noteName, pc } from \"../note\";\nimport { modes as pcsetModes, isSubsetOf, isSupersetOf } from \"../pcset\";\nimport { transpose } from \"../distance\";\nimport { all as chordList } from \"../chord-dictionary\";\nimport { all as scales, find as findScale } from \"../scale-dictionary\";\nimport { compact, sortedUniq, rotate } from \"../array\";\n\n/**\n * A scale is a collection of pitches in ascending or descending order.\n *\n * This module provides functions to get and manipulate scales.\n *\n * @example\n * import Scale from \"tonal/scale\"\n * Scale.notes(\"Ab bebop\") // => [ \"Ab\", \"Bb\", \"C\", \"Db\", \"Eb\", \"F\", \"Gb\", \"G\" ]\n *\n * @example\n * const Tonal = require(\"tonal\");\n * Tonal.Scale.names() => [\"major\", \"minor\", ...]\n *\n * @module Scale\n */\nexport default {\n  tokenize,\n  props,\n  names,\n  intervals,\n  notes,\n  exists,\n  modeNames,\n  chords,\n  toScale,\n  supersets,\n  subsets\n};\n\nconst scaleName = scale => scale.name;\n\n/**\n * Given a string with a scale name and (optionally) a tonic, split\n * that components.\n *\n * It retuns an array with the form [ name, tonic ] where tonic can be a\n * note name or null and name can be any arbitrary string\n * (this function doesn\"t check if that scale name exists)\n *\n * @function\n * @param {string} name - the scale name\n * @return {Array} an array [tonic, name]\n * @example\n * Scale.tokenize(\"C mixolydean\") // => [\"C\", \"mixolydean\"]\n * Scale.tokenize(\"anything is valid\") // => [\"\", \"anything is valid\"]\n * Scale.tokenize() // => [\"\", \"\"]\n */\nexport function tokenize(str) {\n  if (typeof str !== \"string\") return [null, \"\"];\n  const i = str.indexOf(\" \");\n  const tonic = noteName(str.substring(0, i)) || noteName(str);\n  const name = tonic ? str.substring(tonic.length + 1) : str;\n  return [tonic, name.length ? name : \"\"];\n}\n\n/**\n * Get scale properties. It returns an object with:\n * - name: the scale name\n * - names: a list with all possible names (includes the current)\n * - intervals: an array with the scale intervals\n * - chroma:  scale croma (see pcset)\n * - setnum: scale chroma number\n *\n * @function\n * @param {string} name - the scale name (without tonic)\n * @return {Object}\n */\nexport function props(name) {\n  const [tonic, type] = tokenize(name);\n  const scale = findScale(type);\n  const props = {\n    tonic,\n    notes: tonic ? scale.intervals.map(transpose(tonic)) : []\n  };\n  return Object.assign(props, scale);\n}\n\n/**\n * Return the available scale names\n *\n * @function\n * @param {boolean} [aliases=false] - true to include aliases\n * @return {Array} the scale names\n *\n * @example\n * Scale.names() // => [\"maj7\", ...]\n */\nexport function names(aliases) {\n  return aliases\n    ? scales()\n        .map(s => s.names)\n        .reduce((a, b) => [...a, ...b])\n    : scales().map(scaleName);\n}\n\n/**\n * Given a scale name, return its intervals. The name can be the type and\n * optionally the tonic (which is ignored)\n *\n * It retruns an empty array when no scale found\n *\n * @function\n * @param {string} name - the scale name (tonic and type, tonic is optional)\n * @return {Array<string>} the scale intervals if is a known scale or an empty\n * array if no scale found\n * @example\n * Scale.intervals(\"major\") // => [ \"1P\", \"2M\", \"3M\", \"4P\", \"5P\", \"6M\", \"7M\" ]\n */\nexport function intervals(name) {\n  const p = tokenize(name);\n  return props(p[1]).intervals;\n}\n\n/**\n * Get the notes (pitch classes) of a scale.\n *\n * Note that it always returns an array, and the values are only pitch classes.\n *\n * @function\n * @param {string} tonic\n * @param {string} nameOrTonic - the scale name or tonic (if 2nd param)\n * @param {string} [name] - the scale name without tonic\n * @return {Array} a pitch classes array\n *\n * @example\n * Scale.notes(\"C\", \"major\") // => [ \"C\", \"D\", \"E\", \"F\", \"G\", \"A\", \"B\" ]\n * Scale.notes(\"C major\") // => [ \"C\", \"D\", \"E\", \"F\", \"G\", \"A\", \"B\" ]\n * Scale.notes(\"C4\", \"major\") // => [ \"C\", \"D\", \"E\", \"F\", \"G\", \"A\", \"B\" ]\n * Scale.notes(\"A4\", \"no-scale\") // => []\n * Scale.notes(\"blah\", \"major\") // => []\n */\nexport function notes(nameOrTonic, name) {\n  const p = tokenize(nameOrTonic);\n  name = name || p[1];\n  return intervals(name).map(transpose(p[0]));\n}\n\n/**\n * Check if the given name is a known scale from the scales dictionary\n *\n * @function\n * @param {string} name - the scale name\n * @return {Boolean}\n */\nexport function exists(name) {\n  const p = tokenize(name);\n  return findScale(p[1]).name !== undefined;\n}\n\n/**\n * Find mode names of a scale\n *\n * @function\n * @param {string} name - scale name\n * @example\n * Scale.modeNames(\"C pentatonic\") // => [\n *   [\"C\", \"major pentatonic\"],\n *   [\"D\", \"egyptian\"],\n *   [\"E\", \"malkos raga\"],\n *   [\"G\", \"ritusen\"],\n *   [\"A\", \"minor pentatonic\"]\n * ]\n */\nexport function modeNames(name) {\n  const ivls = intervals(name);\n  const tonics = notes(name);\n  debugger;\n\n  return pcsetModes(ivls)\n    .map((chroma, i) => {\n      const modeName = findScale(chroma).name;\n      if (modeName) return [tonics[i] || ivls[i], modeName];\n    })\n    .filter(x => x);\n}\n\n/**\n * Get all chords that fits a given scale\n *\n * @function\n * @param {string} name - the scale name\n * @return {Array<string>} - the chord names\n *\n * @example\n * Scale.chords(\"pentatonic\") // => [\"5\", \"64\", \"M\", \"M6\", \"Madd9\", \"Msus2\"]\n */\nexport function chords(name) {\n  const inScale = isSubsetOf(intervals(name));\n  return chordList()\n    .filter(chord => inScale(chord.intervals))\n    .map(c => c.abbreviatures[0]);\n}\n\n/**\n * Given an array of notes, return the scale: a pitch class set starting from\n * the first note of the array\n *\n * @function\n * @param {Array} notes\n * @return {Array}\n * @example\n * Scale.toScale(['C4', 'c3', 'C5', 'C4', 'c4']) // => [\"C\"]\n * Scale.toScale(['D4', 'c#5', 'A5', 'F#6']) // => [\"D\", \"F#\", \"A\", \"C#\"]\n */\nexport function toScale(notes) {\n  const pcset = compact(notes.map(pc));\n  if (!pcset.length) return pcset;\n  const tonic = pcset[0];\n  const scale = sortedUniq(pcset);\n  return rotate(scale.indexOf(tonic), scale);\n}\n\n/**\n * Get all scales names that are a superset of the given one\n * (has the same notes and at least one more)\n *\n * @function\n * @param {string} name\n * @return {Array} a list of scale names\n * @example\n * Scale.supersets(\"major\") // => [\"bebop\", \"bebop dominant\", \"bebop major\", \"chromatic\", \"ichikosucho\"]\n */\nexport function supersets(name) {\n  if (!intervals(name).length) return [];\n  const isSuperset = isSupersetOf(intervals(name));\n  return scales()\n    .filter(scale => isSuperset(scale.intervals))\n    .map(scaleName);\n}\n\n/**\n * Find all scales names that are a subset of the given one\n * (has less notes but all from the given scale)\n *\n * @function\n * @param {string} name\n * @return {Array} a list of scale names\n *\n * @example\n * Scale.subsets(\"major\") // => [\"ionian pentatonic\", \"major pentatonic\", \"ritusen\"]\n */\nexport function subsets(name) {\n  const isSubset = isSubsetOf(intervals(name));\n  return scales()\n    .filter(scale => isSubset(scale.intervals))\n    .map(scaleName);\n}\n","import * as Array from \"../array\";\nimport * as Chord from \"../chord\";\nimport * as ChordDictionary from \"../chord-dictionary\";\n//import * as Detect from \"../detect\";\nimport * as Distance from \"../distance\";\nimport * as Interval from \"../interval\";\nimport * as Key from \"../key\";\nimport * as Note from \"../note\";\nimport * as Pcset from \"../pcset\";\nimport * as RomanNumeral from \"../roman-numeral\";\nimport * as Scale from \"../scale\";\nimport * as ScaleDictionary from \"../scale-dictionary\";\n\n/**\n * Tonal exports all tonal modules\n *\n * **Important: since v3 single npm packages are not supported**\n *\n * @example\n * // ES6 modules (recommended: requires babel, webpack, browserify, parcel or similar tool)\n * import { Note } from 'tonal'\n * Note.midi('C4') // => 60\n *\n * @example\n * // with require (node.js or ES6)\n * const { Note }= require('tonal')\n * Note.midi('C4') // => 60\n *\n * @example\n * // inside browser (using the bundled package)\n * Tonal.Note.midi('C4') // => 60\n *\n * @module Tonal\n */\nexport default {\n  Array,\n  Chord,\n  ChordDictionary,\n  // Detect, // not ready for publishing yet\n  Distance,\n  Interval,\n  Key,\n  Note,\n  Pcset,\n  RomanNumeral,\n  Scale,\n  ScaleDictionary\n};\n"],"names":["tokenize","props","name","names","pc","oct","chroma","midi","freq","fromMidi","freqToMidi","altToAcc","stepToLetter","fromProps","simplify","enharmonic","NAMES","split","types","filter","note","unaltered","undefined","flats","sharps","const","SHARPS","FLATS","REGEX","str","m","exec","toUpperCase","replace","NO_NOTE","Object","freeze","step","alt","octStr","SEMI","properties","tokens","p","letter","acc","charCodeAt","length","midiToFreq","cached","isMidiRange","value","tuning","Math","pow","L2","log","L440","v","round","LETTERS","fillStr","s","n","Array","join","numToStr","num","op","baseNote","assign","options","pitchClass","floor","sameAccType","isArray","range","rotate","compact","sort","sortedUniq","shuffle","permutations","assert","array","msg","Error","a","b","ascR","descR","times","arr","len","slice","concat","height","src","map","i","rnd","let","t","random","reduce","perm","e","pos","newPerm","splice","invert","ic","semitones","fromSemitones","RegExp","SIZES","TYPES","CLASSES","indexOf","NO_IVL","q","dir","type","simple","abs","altToQ","numToStep","test","cache","ivl","ref","d","IN","IQ","c","o","transpose","transposeBy","add","subtract","interval","fifths","trFifths","FIFTHS","FIFTH_OCTS","f","STEPS","decode","encoder","fn","encode","encodeNote","noteProps","encodeIvl","intervalProps","arguments","tr","fromNote","from","to","decodeIvl","addIntervals","ivl1","ivl2","i1","i2","fromInterval","chromas","isChroma","intervals","isSubsetOf","isSupersetOf","isEqual","modes","includes","pcsetNum","set","parseInt","numNotes","ch","binary","noteChroma","ivlChroma","all","toString","normalize","_","r","IVLS","s1","s2","notes","callbacksFor","object","callbacks","_promiseCallbacks","EventTarget","mixin","this","on","eventName","callback","TypeError","allCallbacks","push","off","index","trigger","label","config","instrument","configure","queue","promise","child","payload","key","_guidKey","id","_id","detail","_result","childId","_label","timeStamp","Date","now","error","setTimeout","entry","guid","childGuid","stack","resolve$1","constructor","noop","resolve","PENDING","FULFILLED","REJECTED","TRY_CATCH_ERROR","getThen","then","tryCatchCallback","tryCatcher","target","apply","tryCatch","handleMaybeThenable","maybeThenable","then$$1","thenable","_state","fulfill","_onError","reject","subscribe","reason","async","sealed","result","call","x","publishRejection","publish","_subscribers","parent","onFulfillment","onRejection","subscribers","settled","invokeCallback","state","hasCallback","Enumerator","Constructor","input","abortOnReject","_instanceConstructor","_abortOnReject","_isUsingOwnPromise","Promise","_isUsingOwnResolve","_init","prototype","_remaining","_enumerate","_eachEntry","_checkFullfillment","_settleMaybeThenable","firstPass","_settledAt","_willSettleAt","resolve$$1","_setResultAt","_this","setSettledResult","guidKey","counter","resolver","needsResolver","resolved","initializePromise","needsNew","after","catch","finally","wrapThenable","onFulFillment","handleValueInput","args","nodeFunc","self","entries","race","AllSettled","_Enumerator","ReferenceError","_possibleConstructorReturn","subClass","superClass","create","enumerable","writable","configurable","setPrototypeOf","__proto__","_inherits","hasOwnProperty","PromiseHash","_possibleConstructorReturn$1","_inherits$1","results","position","HashSettled","_PromiseHash","_possibleConstructorReturn$2","_inherits$2","MapEnumerator","mapFn","_possibleConstructorReturn$3","_inherits$3","bool","_mapFn","val","EMPTY_OBJECT","FilterEnumerator","filterFn","_possibleConstructorReturn$4","_inherits$4","_filterFn","vertxNext","asap","arg","queue$1","scheduleFlush$1","browserWindow","window","browserGlobal","BrowserMutationObserver","MutationObserver","WebKitMutationObserver","isNode","process","isWorker","Uint8ClampedArray","importScripts","MessageChannel","useSetTimeout","flush","channel","iterations","observer","node","nextTick","version","_asap$Promise$EventTa","_defineProperty","obj","defineProperty","versions","match","setImmediate","document","createTextNode","observe","characterData","data","port1","onmessage","port2","postMessage","require","vertx","runOnLoop","runOnContext","attemptVertex","cb","allSettled","hash","hashSettled","rethrow","defer","deferred","denodeify","l","promiseInput","err","arrayResult","argumentNames","makeObject","promises","find","toChord","abbreviatures","chord","has","quality","setnum","byName","localeCompare","NO_SCALE","isString","abbreviature","exists","subsets","supersets","chordName","NUM_TYPES","tonic","findChord","nameOrTonic","chordIntervals","isSuperset","chords","isSubset","aliases","decimal","fromDegree","NAMES_MINOR","toLowerCase","NO_PROPS","getNames","major","isMajor","degree","MODES","NUMS","NOTES","SEVENTHS","modenum","mode","modeNames","fromAlter","NO_KEY","scale","k","cs","degrees","alteredNotes","leadsheetSymbols","symbols","keyName","triads","secDomChords","relative","toScale","scaleName","noteName","substring","findScale","scales","ivls","tonics","pcsetModes","modeName","inScale","chordList","pcset","Chord","ChordDictionary","Distance","Interval","Key","Note","Pcset","RomanNumeral","ScaleDictionary"],"mappings":"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"}