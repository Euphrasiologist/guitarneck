/**
 * Create and manipulate chord progressions.
 *
 *
 * ## Usage
 *
 * ```js
 * import ChordProgression from 'tonal/chord-progression'
 * ChordProgression.toRomanNumerals('C', 'Cmaj7 Dm7 G7')
 * // => [ 'Imaj7', 'IIm7', 'V7' ]
 * ```
 *
 * ## API
 *
 * @module ChordProgression
 */
import { pc, altToAcc } from "../note";
import { props as ivlProps } from "../interval";
import { transpose, interval } from "../distance";
import { props as romanProps } from "../roman-numeral";
import { tokenize } from "../chord";
/**
 * Given a chord progression and a tonic, return the chord progression
 * with roman numeral chords.
 *
 * @param {Array|String} chords - the chord progression
 * @param {String} tonic - the tonic
 * @return {Array} the chord progression in roman numerals
 * @example
 * ChordProgression.toRomanNumerals('C', 'Cmaj7 Dm7 G7') // => [ 'Imaj7', 'IIm7', 'V7' ]
 */
export function toRomanNumerals(key, chords) {
  if (arguments.length === 1) return c => toRomanNumerals(key, c);

  key = pc(key);
  chords = chords.map(tokenize);

  return chords.map(([tonic, type]) => {
    if (!tonic) return null;
    const p = ivlProps(interval(key, tonic));
    return buildRoman(p.num - 1, p.alt, type);
  });
}

const NUMS = ["I", "II", "III", "IV", "V", "VI", "VII"];
function buildRoman(num, alt, element) {
  return altToAcc(alt) + NUMS[num % 7] + (element || "");
}

/**
 * Get chord progression from a tonic and a list of chord in roman numerals
 *
 * @param {String} tonic - the tonic
 * @param {Array|String} progression - the progression in roman numerals
 * @return {Array} the chord progression
 *
 * @example
 * const inC = ChordProgression.fromRomanNumeralsAndTonic('C')
 * inC(['I', 'IIm7', 'V7']) // => ['C', 'Dm7', 'G7']
 */
export function fromRomanNumeralsAndTonic(key, chords) {
  if (arguments.length === 1) return c => fromRomanNumeralsAndTonic(key, c);
  return chords.map(roman => {
    const props = romanProps(roman);
    return props ? transpose(key, props.name) + props.type : null;
  }, chords);
}
